#pragma checksum "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ec9d55520f67527fafa195c7ec4cc2813c6b3922"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Chat_Chat), @"mvc.1.0.view", @"/Views/Chat/Chat.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
using TelebuHubChat.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
using System.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
using Microsoft.AspNetCore.Session;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ec9d55520f67527fafa195c7ec4cc2813c6b3922", @"/Views/Chat/Chat.cshtml")]
    public class Views_Chat_Chat : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/plugins.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/animate.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/Custom.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/FrameStyles.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/css/fontawesome-free-5.12.1-web/css/all.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/jquery.multiselect.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/jquery.mCustomScrollbar.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/images/user.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("chat-icon"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/images/down_icn.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("22"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/images/mail-icn.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/images/contact-icn.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("attach"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/images/clip.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("fileAttach"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("display: none"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/js/jquery-1.11.3.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/jquery_ui.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/js/socket.io-1.2.0.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/custom/WebSocketRequestBinding.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/custom/emailValidation.js?type=v7"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/StaticFiles/js/jquery.multiselect.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("overflow:hidden;"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 5 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
  
    var data = ViewBag.Message;

    var x = Context.Session.GetInt32("AccountId");
    var path = "~/StaticFiles/images/Chat_bg.png";


#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
  
    ViewData["Title"] = "chat";

#line default
#line hidden
#nullable disable
            WriteLiteral("<!DOCTYPE html>\n<html>\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392214314", async() => {
                WriteLiteral("\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Index</title>\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392214770", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
                WriteLiteral("    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392215966", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392217128", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392218290", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392219452", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392220614", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392221778", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    <link href=\"https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@200;400;600;700&display=swap\" rel=\"stylesheet\">\n  ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392223065", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <style>

        #chatWindow .formBase {
            background: url(https://hub-chat.telebu.com/StaticFiles/images/Chat_bg.png) no-repeat;
            background-size: cover;
        }

        .metaData {
            max-height: 215px;
        }

        #CusOldConversations {
            height: 180px
        }

            #CusOldConversations .chatBoxlist {
                margin-bottom: 20px
            }

        .chat-hr {
            border-top: none;
            border-bottom: 1px solid #e8e8e8;
        }

        .btnSubmit.small {
            padding: 6px 12px;
        }

        .multiselect-container {
            position: relative !important;
            width: 99%
        }

            .multiselect-container > li {
                padding: 5px !important
            }

                .multiselect-container > li > a > label {
                    padding: 0px !important;
                }

        .chat_form .multiselect-container input[type=""checkbox""] {
            width: auto !importa");
                WriteLiteral("nt;\n        }\n\n        .chat_form button.multiselect {\n            margin-bottom: 15px;\n        }\n\n        .chat_form .multiselect-container {\n            margin-top: -15px;\n        }\n\t\t#chatWindow.show{\n\t\t\tdisplay:flex;\n\t\t}\n    </style>\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392226235", async() => {
                WriteLiteral("\n\n    <div id=\"blue\" class=\"iconTheme\">\n        <div id=\"iframeBlock\" class=\"frameBlock animated fadeInRight\" style=\"display:block;\">\n");
                WriteLiteral(@"            <div class=""frmContainer widgetTheme"" id=""navBlueTheme"">
                <!--Form-->

                <div id=""submitForm"" class=""hide"">
                    <div class=""formBanner"">

                        <div class=""bnrTitle mt10 center welcomeHeadding"">Welcome to Hub Chat</div>
                        <br><br>
                    </div>
                    <div class=""formBase"">
                        <div class=""formBlock"">
                            <div>
                                <div class=""f16 center mb5"">Before Starting Conversation</div>
                                <div class=""f12 center mb10"">Please let us know your basic details for verfication</div>
                               <div class=""center""><label class='text-danger f12 lblEditErrorMsg'></label></div>
                                <div class=""metaData scroll"">

                                    <div id=""tblAddCallerDetails"" class=""active"">

");
                WriteLiteral(@"                                    </div>


                                </div>
                                <div class=""center mt-3"">
                                    <button class=""btnSubmit"" id=""Submit"">Submit</button>
                                </div>
                            </div>



                        </div>
                    </div>
                </div><!--End Form-->
                <!--Chat-->
                <!--existing user-->
                <div id=""ExistingUser"" style=""display:none"">
                    <div class=""formBanner"">

                        <h4 class=""bnrTitle mt10 mb-1 center"">Welcome to Hub Chat</h4>
                        <p class=""top_text"">What can i help you with ?</p>
                        <br>
                    </div>
                    <div class=""formBase"">
                        <div class=""formBlock mb-3"">
                            <div class=""mt-2"">
                                <div class=""f16 center mb-3"">Your Conversations</div>
");
                WriteLiteral(@"
                                <div id=""CusOldConversations"">
                                </div>


                                <div class=""center mt-4 mb-2"">
                                    <button type=""button"" id=""CusAllChats"" class=""btnSubmit mr-2 btn-half""><i class=""far fa-comments mr-2""></i> All Chats</button>
                                    <button type=""button"" id=""CusNewChat"" class=""btnSubmit btn-half""><i class=""far fa-comment mr-2""></i> New Chat</button>
                                </div>

                            </div>



                        </div>
                    </div>
                </div>
                <!--end -->
                <!--all chats-->
                <div id=""AllChats"" style=""display:none"">
                    <div class=""formBanner"">
                        <h4 class=""bnrTitle mt10""><i class=""fa fa-angle-left mr-2 pointer"" id=""back""></i> All Conversations</h4>
                        <br>
                    </div>
                    <div class=");
                WriteLiteral(@"""formBase"">
                        <div class=""formBlock"">
                            <div class=""scroll allChatbox"">
                                <div id=""allConversations"">

                                </div>

                                <!--<div class=""link"">
                                    <a>See All Conversations <i class=""fa fa-angle-right ml-1""></i></a>
                                </div>-->

                            </div>

                        </div>
                        <div class=""center mt-3"">
                            <button type=""button"" class=""btnSubmit"" id=""startNewConversation""><i class=""far fa-comment mr-2""></i> Start New Conversation</button>
							 <div id=""strtOverText"" style=""display:none;color:red;font-size: 14px;"">You can't startover another conversation as there is an active conversation</div>
                        </div>
                    </div>
                </div>

                <!--end-->
                <div id=""chatWindow"" class=""hide"">
<");
                WriteLiteral(@"div class=""chat-dis"">
                    <div class=""formBanner clearfix"">
                        <div class=""pull-left"">
                            <span class=""mr-1"" id=""backToAllChats"" style=""display:none"">
                                <i class=""fa fa-chevron-left""></i>
                            </span>
                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392231310", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                            <span class=\"bnrTitle\" id=\"custName\"></span>\n                        </div>\n                        <div class=\"pull-right mt-2\">\n                            <span class=\"mr-1 pointer\" style=\"display:none\">");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392232715", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("</span>\n                            <span class=\"mr-1 pointer\" style=\"display:none\">");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392234048", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("</span>\n                            <span class=\"mr-1 pointer\" id=\"customerAllChats\" title=\"AllChats\">");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392235401", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"</span>
                            <!--<span class=""pointer""><img src=""~/StaticFiles/images/close_icn.png"" alt="""" width=""22"" /></span>-->
                        </div>


                    </div>
                    <div class=""formBase scroll"">
                        <div id=""conversation"">
                        </div>
                    </div>
                    <div class=""typeBlock"">
                        <div class=""center mb-2 startOver  mt-3"" style=""display:none""><button type=""button"" id=""startOverBtn"" class=""btnSubmit"">Start Over</button></div>
                        <div class=""typeArea"" style=""display:none"">
                            <input type=""text"" class=""text-box"" id=""message"" placeholder=""type here…"" />
                            <!--<img class=""smiley"" src=""images/smiley.png"" />-->
                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ec9d55520f67527fafa195c7ec4cc2813c6b392237538", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                            <input type=""file"" id=""fileUpload"" style=""display: none"" />
                            <span class=""send"" id=""send""><i class=""fa fa-paper-plane mt-3""></i></span>
                        </div>
                        <div class=""poweredBy mb-1"">Powered by Telebu</div>
                    </div>
 </div>
                </div>

                <!--End Chat-->
            </div>
        </div>

    </div>

    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392239412", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392240497", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392241582", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n");
                WriteLiteral("\t");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392242699", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392243784", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.concat.min.js\"></script>\n");
                WriteLiteral("    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392245048", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec9d55520f67527fafa195c7ec4cc2813c6b392246133", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n    <script>\n\t\t//console.log(\"");
#nullable restore
#line 258 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                  Write(data.HttpReferrer);

#line default
#line hidden
#nullable disable
                WriteLiteral(@""");
        var webSocketRequestBinding = new WebSocketRequestBinding({});
        var socketBindingURL = """", endchat = """",isSubscribed=0;
        var isAgent = 0; success = 0, msg = """",msgCount = 0, convMsg = """",chatCloserTimer=0,custChatCloserTimer=0;
        var ws, conversationId = 0,chatConversation = """",Optionlist = [], agentTimer = 0,pingToken,chatcloser = 0,isReload=0,isDisconnect=0;
		var url = ""https://hub-chat.telebu.com"";
        // var url=""http://hubchat.com"";
        var isPingAgent=");
#nullable restore
#line 265 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                   Write(data.IsPing);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
         var imgUrl = url + ""/StaticFiles/images/Sender-sm.png"";
        var hitMsg = """", clientSocket, agentSocket, loadPing = 0, customerSocket, isSocketSubscribed = 0, firstHit = 0,msgIds=[], isClosed = 0;
        var is_endreason = 0, nowtime = """", receiveTime = """", sentTime = """", OldConversationIds = [],userId,base64String,extnsn,msgType;
        var widgetUUID = """);
#nullable restore
#line 269 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetUuid);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"""; //""llSbLYfCipcQvrSALW22OtLJonRmYZHO"";//""GUPa0QnYpPoLpitru8AfVighltknAFc6"";// ""XW0pY3yNG1O01CfHJdyaElcr0oMpucMY"";
       // var widgetUUID = ""6J9N59RmvTjoYDaqLQtNJ2KGOWVVFEzg"";
        var CustomerChannelName;
       // localStorage.clear();
        var butt = """";
            var WidgetId =");
#nullable restore
#line 274 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n        var AccountId =");
#nullable restore
#line 275 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                  Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
        var custTimer, botQuestions = [];
		 var timerArr = new Array();

            //var url=""http://hubchat.com"";
        //var webSocketRequestBinding = new WebSocketRequestBinding({});
        $(document).ready(function () {
           // GetCurrentWidgetConfiguration(WidgetId);
		     if(WidgetId == 3)
			$("".welcomeHeadding"").text(""Welcome to Ping Chat"");
			else if(WidgetId == 4)
			$("".welcomeHeadding"").text(""Welcome to grptalk chat"");
			
           if ((localStorage.getItem(""PathName"") != window.location.pathname) || localStorage.getItem(""releaseDate"") == null) {
               localStorage.clear();
               localStorage.setItem(""PathName"", window.location.pathname);
               localStorage.setItem(""releaseDate"", new Date());
           }
		   
		    if (localStorage.getItem(""releaseDate"") == null) {
                localStorage.clear();
                localStorage.setItem(""releaseDate"", new Date());
            }
            if (localStorage.getItem(""isDisconnect"") == null) {
       ");
                WriteLiteral(@"         localStorage.setItem(""isDisconnect"", isDisconnect);
            }
            $("".scroll"").mCustomScrollbar({
                theme: ""minimal""
            });
            conversationId = localStorage.getItem(""conversationId"");
			if (localStorage.getItem(""chattimer"") != null && localStorage.getItem(""chattimer"")>0 && localStorage.getItem(""chattimer"") != undefined) {
				if(conversationId  != null &&conversationId  != undefined)
				customerChatCloserTimer(conversationId);
			}
			
			
			
            var oldActiveConversationId = localStorage.getItem(""OldConversationIdActivetrue"");
            if (oldActiveConversationId == ""1"") {
                funGetWidget(widgetUUID);
                $(""#custName"").text(localStorage.getItem(""customerName""));
                getOldConversationHistory();
				 if (localStorage.getItem(""Startoverenabled"") == ""true"") {
				  $(""#customerAllChats"").trigger(""click"");}
                return false;
            }

            if (conversationId == 0 || conversationId == n");
                WriteLiteral(@"ull || conversationId == ""undefined"") {
                localStorage.setItem(""success"", ""0"");
                localStorage.setItem(""OldChatConversationId"", """");
                localStorage.setItem(""reopenOldConversation"","""" )
                if (localStorage.getItem(""NoPreviewsData"") == ""0"") {
                    funGetWidget(widgetUUID);
                    GetConversationMessages(""1"");
                        $(""#chatWindow"").addClass(""hide"");
                    $(""#ExistingUser"").show();
                    return false;
                } 
				//else {
				//	localStorage.clear();
                //}
               // localStorage.setItem(""NoPreviewsData"",""1"");
                localStorage.setItem(""Customer_ChannelName"", CustomerChannelName);
                funGetWidget(widgetUUID);

                if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""At the start of the conversation"") {

                GenerateDynamicWelcomeFrom();
                localStorage.setItem(""isEndReason"", is_endreason);");
                WriteLiteral(@"
                $(""#submitForm"").removeClass(""hide"");


                } else if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""Before connecting to an agent"") {
                    localStorage.setItem(""isEndReason"", is_endreason);
                    loadChatWidget();
                } else if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""After agent is connected"") {
                    localStorage.setItem(""isEndReason"", is_endreason);
                    loadChatWidget();
                }

            }
            else {
                if (localStorage.getItem(""AgentName"") != null && localStorage.getItem(""AgentName"") != """" && localStorage.getItem(""AgentName"") != undefined) {
                    $(""#custName"").text(localStorage.getItem(""AgentName""));
                }
                else
                    $(""#custName"").text(localStorage.getItem(""customerName""));
				
				localStorage.setItem(""success"", ""1"");
				
                if (localStorage.getItem(""AgentName"") == null) {
     ");
                WriteLiteral(@"               $(""#custName"").text(""Bot"");
                }
                //imgUrl = ""http://hubchat.com/StaticFiles/images/BotIcon.png"";
				 imgUrl = ""https://hub-chat.telebu.com/StaticFiles/images/BotIcon.png"";
                 funGetWidget(widgetUUID);
                chatConversation = localStorage.getItem(""ChatConversation"");
				try{
					chatConversation = JSON.parse(chatConversation);
					}
					catch(e){}
				if (localStorage.getItem(""botQuestions"") != null)
                botQuestions = JSON.parse(localStorage.getItem(""botQuestions""));
                for (var j = 0; j < chatConversation.length; j++) {
                    var temp1 = chatConversation;
                    var retValue1 = chatConversation[j];
                   // console.log(retValue1)
                    var resMsg1 = retValue1.text;
					var msgTime = retValue1.timeStamp;
                    var recipient_id = retValue1.recipient_id;
					 var a=""Customer_""+conversationId;
					var b=""agent_""+conversationId;
					if(recipient");
                WriteLiteral(@"_id == a || recipient_id == b || recipient_id == conversationId){
                    butt = """";
					 if (retValue1.hasOwnProperty(""attachment"")) {
					  if (retValue1.attachment.type == ""video"") {
                        var video_url = retValue1.attachment.payload.src;
                        var text1 = '<div class=""video-container""> <iframe src=""' + video_url + '"" frameborder=""0"" allowfullscreen></iframe> </div>'
                        //$(BotResponse).appendTo("".chats"").hide().fadeIn(1000);
						 $(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
                    }
					}
                    try {
			        if (retValue1.custom == undefined){}
			        else if(retValue1.custom[0].payload ==""Endchat""){
                        endchat = retValue1.custom[0].payload;
                        if (endchat == ""Endchat"") {
                            if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""Before connectin");
                WriteLiteral(@"g to an agent"") {
                                if (localStorage.getItem(""BeforeAgentWelcomeFromvalidation"") == ""0"") {
                                    GenerateDynamicFrom();
                                    $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
                                    return false;
                                }
                            }
                           // imgUrl = ""http://hubchat.com/StaticFiles/images/BotIcon.png"";
							 imgUrl =""https://hub-chat.telebu.com/StaticFiles/images/BotIcon.png"";
                            $("".typeArea"").show();
                              //  customerWebSocketSubscription();
                                endchat = ""TalkingToAgent"";
                        }
						
						   if (retValue1.custom[0].text != undefined) { 
                            var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                           ");
                WriteLiteral(@" text1 = text1 + '<p>' + retValue1.custom[0].text + '</p>' + butt + '</div></div>';


                $(""#conversation"").append(text1);
				}

                if (localStorage.getItem(""NonBusinessHours"") == ""0"") {
                    if (getDayAndTime(0) >= localStorage.getItem(""FromTime"") && getDayAndTime(0) <= localStorage.getItem(""ToTime"")) {

                    }
                    else {
                         var NonBusinessHoursMsg = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                        NonBusinessHoursMsg = NonBusinessHoursMsg + '<p>' + localStorage.getItem(""NonBusinessHoursMessage"") + '</p></div></div>';
                        $(""#conversation"").append(NonBusinessHoursMsg);
                        $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
                        return false;
                    }
                }

			}
			 else if(retValue1.custom[0].payload == ""image""){
			 	var grptlk=retVa");
                WriteLiteral(@"lue1.custom[0].text;
								 var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                   // text1 = text1 + '<a href=""'+grptlk+'"" target=""_blank""><img width=""20%"" height=""10%"" src=""' + grptlk+ '"" alt="""" ><a></div></div>';
									text1 = text1 + '<a href=""'+grptlk+'"" target=""_blank"">'+grptlk+'<a></div></div>';
									 $(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
			 }
                    }
                    catch (e) { console.log(e); }
                    try {

                        if (retValue1.buttons == undefined) { }
			            else{

                            if (retValue1.buttons.length > 0 ) {
                                butt = '<div class=""mt-2"">';
                                var botQtnAns = """";
								try {
									for (var k = 0; k < botQuestions.length; k++) {
										if (resMsg");
                WriteLiteral(@"1 == botQuestions[k].question  && botQuestions[k].recipient_id == conversationId) {
											botQtnAns = botQuestions[k].Values;
										}
									}
								}
								catch (e) {}
                                for (var i = 0; i < retValue1.buttons.length; i++) {


                                    if (botQtnAns != """") {
                                        if (retValue1.buttons[i].payload == ""submit"") {
                                            butt = butt + '<hr class=""mt-2 mb-3 chat-hr"">';
                                            butt = butt + '<div class=""center""><button type=""button"" question=""' + resMsg1 +'"" onclick=""submitAction(this)"" value=""Submit"" class=""btnSubmit small mr-2 mb-2 "" disabled=""disabled"" style=""cursor:not-allowed"">Submit</button></div>'
                                        }
                                        else {

                                            if (botQtnAns == retValue1.buttons[i].title) {
                                                butt = b");
                WriteLiteral(@"utt + '<button type=""button"" onclick=""btnAction(this)"" value=""' + retValue1.buttons[i].title + '"" class=""btnSubmit-sm mr-2 mb-2 select"" disabled=""disabled"" style=""cursor:not-allowed"">' + retValue1.buttons[i].title + '</button>';
                                            }
                                            else {
                                                butt = butt + '<button type=""button"" onclick=""btnAction(this)"" value=""' + retValue1.buttons[i].title + '"" class=""btnSubmit-sm mr-2 mb-2 "" disabled=""disabled"" style=""cursor:not-allowed"">' + retValue1.buttons[i].title + '</button>';
                                            }
                                        }
                                    }
                                    else {

                                        if (retValue1.buttons[i].payload == ""submit"") {
                                            butt = butt.replace(/ action=""submit""/g, """")
                                            butt = butt + '<hr class=""mt");
                WriteLiteral(@"-2 mb-3 chat-hr"">'
                                            butt = butt + '<div class=""center""><button type=""button"" question=""' + resMsg1 +'"" onclick=""submitAction(this)"" value=""Submit"" class=""btnSubmit small mr-2 mb-2 "">Submit</button></div>'
                                        }
                                        else
                                            butt = butt + '<button type=""button"" onclick=""btnAction(this)"" value=""' + retValue1.buttons[i].title + '"" action=""submit"" class=""btnSubmit-sm mr-2 mb-2"" >' + retValue1.buttons[i].title + '</button>';
                                        }
                                    }
                                    butt = butt + '</div>';
                                }
			                }
                        }
                        catch (e) { console.log(e); }
                        if (recipient_id == conversationId) {
                            var conversation = '<div class=""speechItem""><div class=""clearfix""><img src=""' + ");
                WriteLiteral(@"imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                            conversation = conversation + '<p>' + resMsg1 + '</p>' + butt + '</div></div>';
                        } else if (recipient_id == ""agent_"" + conversationId) {
                           // imgUrl = ""http://hubchat.com/StaticFiles/images/Sender-sm.png"";
							 imgUrl = ""https://hub-chat.telebu.com/StaticFiles/images/Sender-sm.png"";
                              var conversation = '<div class=""speechItem""><div class=""clearfix"">'
                            conversation = conversation + '<img src=""' + imgUrl + '"" alt="""" class=""left"" />'
                            conversation = conversation + '<div class=""speechLeft""><p>' + resMsg1 + '</p></div></div>';
						    conversation = conversation + '<div class=""time"">' + msgTime + '</div></div>';
                        }
                        else if (recipient_id == ""Customer_""+conversationId){
                            var conversation = '<div class=""speechItem right""><div");
                WriteLiteral(@" class=""speechRight"">';
                            conversation = conversation + '<p>' + resMsg1 + '</p></div>';
						    conversation = conversation + '<div class=""time"">' + msgTime + '</div></div>';
                        }
					    if (resMsg1 != ""undefined"" && resMsg1 != undefined) {
                            $(""#conversation"").append(conversation);
                           // $(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                            $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
                        }

				        $(""#submitForm"").addClass(""hide"");
                        $(""#chatWindow"").removeClass(""hide"");
                      //  $(""#chatWindow"").addClass(""show"");
                        //$("".typeArea"").show();
			            $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
						if (localStorage.getItem(""Startoverenabled"") == ""true"") {
						$("".startOver"").show();
						$("".typeArea"").hide();
						}
           ");
                WriteLiteral(@"             // document.getElementById(""imgUrl"").src=imgUrl; <div class=""time"">02:30 PM</div>
                    }
					}//for close
                    if (localStorage.getItem(""success"") == ""0"") {
                        $(""#submitForm"").removeClass(""hide"");
                        $(""#chatWindow"").addClass(""hide"");
                    }
                }
            });
            //$("".error"").parent().find("".errMsg"").show();
            //$(""#Submit"").click(function () {
            //    $(""#submitForm"").addClass(""hide"");
            //    $(""#chatWindow"").addClass(""animated fadeInRight show"");
            //});
			
			if (localStorage.getItem(""Startoverenabled"") == ""true"") {
                 $("".startOver"").show();
				 $("".typeArea"").hide();
            }
			
            customerWebSocketSubscription();
            if (localStorage.getItem(""userId"") != """" && localStorage.getItem(""userId"") != null) {
            SubscribeToSocket()
            isReload = 1;
    //            var str = 'ws://staging-");
                WriteLiteral(@"ping.telebu.com/support';
    //            userId = localStorage.getItem(""userId"")
    //            customerSocket = io.connect(str, { query: 'userId=' + userId + '&mode=client' })
    //            customerSocket.on('connect', function () {
    //                console.log(""connected"");
    //                isSocketSubscribed = 1;
    //            });
				//customerSocket.on('newMessage', function (data) {
    //                console.log(data);
    //                agentTimer = 100;
    //                chatcloser = 100;
    //                clearInterval(agentTimer);
    //                clearInterval(chatcloser);
    //                customerChatCloserTimer();
    //                	conversationId = localStorage.getItem(""conversationId"");
    //                    nowtime = new Date();
				//		receiveTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
    //                    var CustomerMsg2 = JSON.parse('{""recipient_id"":""agent_' + conversationId + '"",""text"":");
                WriteLiteral(@"""' + data.message + '"",""timeStamp"":""' + receiveTime + '""}');
    //                    chatConversation = """";
    //                    convMsg = """";
    //                    chatConversation = localStorage.getItem(""ChatConversation"");

				//		if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
				//			chatConversation = chatConversation.slice(0, -1);
				//			convMsg = JSON.stringify(CustomerMsg2);
				//			chatConversation = chatConversation +"",""+ convMsg;
				//			chatConversation = chatConversation + ']';
				//			localStorage.setItem(""ChatConversation"",chatConversation);
				//			} else {
				//			localStorage.setItem(""ChatConversation"",JSON.stringify(CustomerMsg2));
    //                }
    //                 var IsPingAgent = localStorage.getItem(""IsPingAgent"");
    //                if (IsPingAgent == ""true"") {
    //                    toSendConversation_Of_aAgent_Customer(data.message, 4);
    //                    conversati");
                WriteLiteral(@"onMessageId = localStorage.getItem(""ConversationMessageId"");
    //                    updateConversationMessage(conversationMessageId);
    //                }
    //                $(""#conversation"").append('<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft""><p>' + data.message + '</p></div></div></div>');
    //                 $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
    //            });
                    }


            $(document).delegate(""#message"", ""keyup"", function (event) {
                if (event.keyCode == 13) {
                    $(""#send"").click();
                    event.preventDefault();
                    return false;
                }
            });




            $(""#send"").click(function () {
                var msg = $(""#message"").val();
				if(msg.trim() == """"){
				return false;
				}
			    nowtime  = new Date();
			    sentTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*");
                WriteLiteral(@")/, ""$1$3"");
                if (msg == """") { return false;}
                hitMsg = msg;
                var text = '<div class=""speechItem right""><div class=""speechRight"">';
                text = text + '<p>' + msg + '</p></div>';
                text = text + '<div class=""time"">' + sentTime + '</div></div>';


                if(extnsn == ""png"")
		            msgType =""1""
	            else if(extnsn == ""xls"" || extnsn == ""xlsx"" || extnsn == ""pdf"")
		            msgType =""6"";
	            else if(extnsn == ""mp3"" || extnsn == ""mp4"")
		            msgType =""2"";
	            else
		            msgType =""0"";





            var OldChatConId =  localStorage.getItem(""OldChatConversationId"");
            var reopenOldConversation = localStorage.getItem(""reopenOldConversation"");




            if (OldChatConId != """" && OldChatConId != null) {
                 conversationId = localStorage.getItem(""OldChatConversationId"");
                chatConversation = """";
                convMsg = """";
                chatC");
                WriteLiteral(@"onversation = localStorage.getItem(""reopenOldConversation"");

                $(""#conversation"").append(text);
                //$(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
            } else {
                conversationId = localStorage.getItem(""conversationId"");
                chatConversation = """";
                convMsg = """";
                chatConversation = localStorage.getItem(""ChatConversation"");
                if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
                    var CustomerMsg = JSON.parse('{""recipient_id"":""Customer_' + conversationId + '"",""text"":""' + msg + '"",""timeStamp"":""' + sentTime + '""}');
                    chatConversation = chatConversation.slice(0, -1);
                    convMsg = JSON.stringify(CustomerMsg);
                    chatConversation = chatConversation + "","" + convMs");
                WriteLiteral(@"g;
                    chatConversation = chatConversation + ']';
                    localStorage.setItem(""ChatConversation"", chatConversation);
                } else {
                    var CustomerMsg = JSON.parse('[{""recipient_id"":""Customer_' + conversationId + '"",""text"":""' + msg + '"",""timeStamp"":""' + sentTime + '""}]');
                    localStorage.setItem(""ChatConversation"", JSON.stringify(CustomerMsg));
                }
                $(""#conversation"").append(text);
               // $(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
            }
            if (isSocketSubscribed == 1 && endchat != """") {
		        conversationId = localStorage.getItem(""conversationId"");
                var jsonObj = {};
                if (isAgent == 1) {
                    if (firstHit == 0) {
                        UpdateAgentsForHubchat('on call', 2058);
                    }
                 ");
                WriteLiteral(@"   jsonObj = { ""conversationId"": ""200"", ""from"": ""1000"", ""to"": ""1001"", ""messageType"": ""0"", ""message"": hitMsg, ""mediaUrl"": """" };
                    agentSocket.emit('newMessage', jsonObj, function (data) { console.log(data); });
                    firstHit = 1;
                    if (hitMsg.toLowerCase() == ""bye"") {
                        UpdateAgentsForHubchat('ready', 2058);
                    }
                }
                else {
                     var agentId = localStorage.getItem(""pingAgentId"");
                     conversationId = localStorage.getItem(""conversationId"");
                    chatConversation = localStorage.getItem(""ChatConversation"");
                     var IsPingAgent = localStorage.getItem(""IsPingAgent"");
                    var fromId = localStorage.getItem(""userId"");
                    if (IsPingAgent == ""true"") {
                    jsonObj = { ""conversationId"": conversationId, ""from"": conversationId, ""to"":agentId , ""messageType"": ""0"", ""message"": hitMsg };
            ");
                WriteLiteral(@"        } else {
                         jsonObj = { ""conversationId"": conversationId, ""from"": fromId, ""to"": agentId, ""messageType"": ""0"", ""message"": hitMsg };
                    }
                    // jsonObj = { ""conversationId"": ""200"", ""from"": ""1001"", ""to"": """"5d820a80c3ad6403558f612d"""", ""messageType"": ""0"", ""message"": hitMsg, ""mediaUrl"": """" };
                    customerSocket.emit('newMessage', jsonObj, function (data) {
                        custChatCloserTimer = 0;
                         chatcloser =0;
						 localStorage.setItem(""chattimer"",chatcloser);
                        customerChatCloserTimer();
                        recordId = [];
                        console.log(data.recordId);
                        toSendConversation_Of_aAgent_Customer(hitMsg, 3);
                        recordId.push(data.recordId);
                        var dlvryObj = { ""conversationId"": conversationId, ""recordId"": recordId, ""status"": ""3"" };
                        customerSocket.emit('messageAck', dlvryObj");
                WriteLiteral(@", function (data) {
                            console.log(data);
                            if (data.msg == ""success"") {
                                console.log(localStorage.getItem(""ConversationMessageId""));
                                conversationMessageId = localStorage.getItem(""ConversationMessageId"");
                                updateConversationMessage(conversationMessageId);
                            }
                        });
                    });
                }
            }
            //else if (endchat == ""Endchat"") {
            //    var isPing = GetAgentsForHubchat();
            //    if (isPing == 1) {
            //        SubscribeToSocket();
            //    } else {
            //        if (isSubscribed != 1) {
            //            webSocketSubscription()
            //        }
            //        //InsertConversation(msg)
            //        endchat = ""TalkingToAgent"";
            //    }
            //    $(""#message"").val('');
            //    ret");
                WriteLiteral(@"urn false;
            //}
            else if (endchat == ""TalkingToAgent"") {
                toSendConversation_Of_aAgent_Customer(msg, 3);
                InsertConversation(msg);

                $(""#message"").val('');
                return false;
            }
            $(""#message"").val('');
            if (isAgent == 0 && (endchat == """" || endchat == undefined)) {
				conversationId = localStorage.getItem(""conversationId"");	
                 BotInteraction(conversationId, msg);
            }

        });
        function BotInteraction(conversationId, msg) {
            if (msg == ""Yes"") {
                if (localStorage.getItem(""IsUsed"")== ""1"")
                msg = ""/affirm{\""group\"":\""Yes\""}"";
                }
            else if (msg == ""No"") {
                if (localStorage.getItem(""IsUsed"")== ""1"")
                 msg = ""/deny{\""group\"":\""No\""}"";
            }
               var g=");
#nullable restore
#line 754 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 755 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 756 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
           var url =""https://hub-chat.telebu.com"";
	   nowtime = new Date();
            sentTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
           // var url =""http://hubchat.com"";
            var imgUrl = url + ""/StaticFiles/images/BotIcon.png"";
            is_endreason = localStorage.getItem(""isEndReason"");
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/"" + is_endreason + ""/replies/"";

            var Data2 = JSON.stringify({
                ""MessageTypeId"": ""1"",
                ""Message"":msg
            });
            $.ajax({
                type: ""POST"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: Data2,
                success: function (res) {

                    var t = JSON.parse(res.Message);
                    convMsg = """";
                    butt = """";
         ");
                WriteLiteral(@"           chatConversation = """";
                    chatConversation = localStorage.getItem(""ChatConversation"");
                    if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
                        chatConversation = chatConversation.slice(0, -1);
                        convMsg = JSON.stringify(t);
                        convMsg = convMsg.substring(1, convMsg.length - 1);
                        chatConversation = chatConversation + "","" + convMsg;
                        chatConversation = chatConversation + ']';
                        localStorage.setItem(""ChatConversation"", chatConversation);
                    } else {
                        localStorage.setItem(""ChatConversation"", JSON.stringify(t));
                    }


                    //alert(t.length)
                    for (var j = 0; j < t.length; j++) {
                        var temp1 = JSON.parse(res.Message);
                        var retValue = JSON");
                WriteLiteral(@".parse(res.Message)[j];
                        console.log(retValue)
                        butt = """";
                        var resMsg = retValue.text;
						  var grptkendchat1 = ""No worries! We are available on your beck and call if you need anything. Please continue browsing and have a great day!"";
						  var grptkendchat2=""No problem :) Please feel free to initiate a conversation at any point of time. Have a great day!"";
						  var grptkendchat3=""We understand. Please feel free to initiate a conversation at any point of time. Have a great day :)"";
                        if (resMsg == grptkendchat1 || resMsg == grptkendchat2 || resMsg == grptkendchat3)
                        {
                              UpdateTocloseChat(1,conversationId);
							   UpdateBotFlowEnd(1, conversationId);
                            var name=""isAgentconnected_""+conversationId;
					         localStorage.setItem(name,0);
					          localStorage.setItem(""isEndReason"", 1);
					         $("".startOver"").children()");
                WriteLiteral(@".attr(""ActualConversationId"", conversationId);
					        localStorage.setItem(""Startoverenabled"", ""true"");
				            $("".startOver"").show();
                            $("".typeArea"").hide();
							 var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
							  text1 = text1 + '<p>' + resMsg + '</p></div></div>';
                                   // text1 = text1 + '<img src=""' + resMsg + '"" alt="""" ></div></div>';
									 $(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
                            return false;
                        }
						 if (retValue.hasOwnProperty(""attachment"")) {
                    //check if the attachment type is ""video""
                    if (retValue.attachment.type == ""video"") {
                        var video_url = retValue.attachment.payload.src;
                        var text1 = '<div class=""video-c");
                WriteLiteral(@"ontainer""> <iframe src=""' + video_url + '"" frameborder=""0"" allowfullscreen></iframe> </div>'
                        //$(BotResponse).appendTo("".chats"").hide().fadeIn(1000);
						 $(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
                    }
                }
				if(retValue.hasOwnProperty(""image"")){
				 var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                    text1 = text1 + '<img src=""' + retValue.image+ '"" alt="""" ></div></div>';
									 $(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
				}

                        try {
                            if (retValue.custom == undefined) {
                            }
                            else {
                                endchat = retValue.custom[0].payload;
			");
                WriteLiteral(@"					if(endchat == ""image""){
								var grptlk=retValue.custom[0].text;
								 var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                    text1 = text1 + '<a href=""'+grptlk+'"" target=""_blank"">'+grptlk+'<a></div></div>';
									//text1 = text1 + '<a href=""'+grptlk+'"" target=""_blank""><img width=""20%"" height=""10%"" src=""' + grptlk+ '"" alt="""" ><a></div></div>';
									 $(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
										// return false;
										//<a href=""https://i.ibb.co//34D8SNY//grptalk.jpg"" target=""_blank""><img src=""https://i.ibb.co//34D8SNY//grptalk.jpg"" //width=""20%"" height=""10%"" ></a>
								}
                                else if (endchat == ""Endchat"") {
								 UpdateBotFlowEnd(1, conversationId);
                                    if (localStorage.getItem(""NonBusinessHours"") == ""0"") {
         ");
                WriteLiteral(@"                               console.log(getDayAndTime(0));
                                        if (getDayAndTime(0) >= localStorage.getItem(""FromTime"") && getDayAndTime(0) <= localStorage.getItem(""ToTime"")) {
                                            if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""Before connecting to an agent"") {
                                                localStorage.setItem(""BeforeAgentWelcomeFromvalidation"",""0"");
                                            } else {
                                                customerTimer();
                                                localStorage.setItem(""isEndReason"", 1);
                                                GetAgentsForHubchat();
                                                $("".typeArea"").show();
                                            }
                                        } else {
                                             var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + im");
                WriteLiteral(@"gUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                             text1 = text1 + '<p>' + localStorage.getItem(""NonBusinessHoursMessage"") + '</p></div></div><div class=""time"">' + sentTime + '</div>';
                                             $(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
                                            return false;
                                        }
                                    } else if (localStorage.getItem(""NonBusinessHours"") == ""1"") {
                                        var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                        text1 = text1 + '<p>' + localStorage.getItem(""NonBusinessHoursMessage"") + '</p></div></div><div class=""time"">' + sentTime + '</div>';
                                         $(""#conversation"").append");
                WriteLiteral(@"(text1);
                                         $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
                                        return false;
                                    }

                                    var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                    text1 = text1 + '<p>' + retValue.custom[0].text + '</p>' + butt + '</div></div><div class=""time"">' + sentTime + '</div>';

                                    if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""Before connecting to an agent"") {
                                        text1 = """";
                                        GenerateDynamicFrom();

                                    } else {

                                        if (localStorage.getItem(""isEndReason"") == 1) {
                                            text1 = """";
                                            text1 = text1 + '<div c");
                WriteLiteral(@"lass=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft""><p>' + localStorage.getItem(""WhileConnectingToAnAgent"") + '</p></div></div><div class=""time"">' + sentTime + '</div>';
                                        }
										//toSendConversation_Of_aAgent_Customer(localStorage.getItem(""WhileConnectingToAnAgent""), 4);
									    var jsnMsg='[{""text"":""' + localStorage.getItem(""WhileConnectingToAnAgent"") + '""}]';
										toSendConversation_Of_aAgent_Customer(jsnMsg, 2);
                                        $(""#conversation"").append(text1);
                                    }



                                    //else {
                                    //     $("".typeArea"").show();
                                    //}

                                    //$(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                                    $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
     ");
                WriteLiteral(@"                               return false;
                                }
                            }
                        }
                        catch (e) { console.log(e); }
                        try {
                            if (retValue.buttons == undefined) { }
                            else {

                                if (retValue.buttons.length > 0) {
                                    butt = '<div class=""mt-2"">';
                                    for (var i = 0; i < retValue.buttons.length; i++) {
                                        if (retValue.buttons[i].payload == ""submit"") {
                                            butt = butt.replace(/ action=""submit""/g,"""")
                                            butt = butt + '<hr class=""mt-2 mb-3 chat-hr"">'
                                            butt = butt + '<div class=""center""><button type=""button"" question=""' + resMsg+'"" onclick=""submitAction(this)"" value=""Submit"" class=""btnSubmit small mr-2 mb-2 "">Submit</butt");
                WriteLiteral(@"on></div>'
                                        }
                                        else
                                            butt = butt + '<button type=""button"" onclick=""btnAction(this)"" value=""' + retValue.buttons[i].title + '"" action=""submit"" class=""btnSubmit-sm mr-2 mb-2 "">' + retValue.buttons[i].title + '</button>';
                                    }
                                    butt = butt + '</div>';
                                }
                            }
                        }
                        catch (e) { console.log(e); }
                        var text = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                       if (resMsg == ""Are you currently using any call center software?"" || resMsg ==""Have you used a conferencing solution before?""){
					   //if (resMsg == ""Are you currently using any call center software?"") {
                            localStorage.setItem(""IsUsed""");
                WriteLiteral(@", ""1"");
                        } else {
                            localStorage.setItem(""IsUsed"", ""0"");
                        }
                        text = text + '<p>' + resMsg + '</p>' + butt + '</div></div><div class=""time"">' + sentTime + '</div>';
						if(resMsg != undefined)
                        $(""#conversation"").append(text);
                        //$(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                        $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
                        //if (resMsg == ""Please answer the following questions to help us serve you better:"") {
                        //    $(""#submitForm"").removeClass(""hide"");
                        //    $(""#chatWindow"").addClass(""hide"");
                        //    return false;
                        //}
                        $(""#chatWindow"").removeClass(""hide"");

                        if ($('.iconClose').hasClass('show')) {
                            msgCount ");
                WriteLiteral(@"= 0;
                            $(""#notificationCount"").text(msgCount);
                            $("".chat_notify"").hide();

                        } else {
                            msgCount = msgCount + 1;
                            $(""#notificationCount"").text(msgCount);
                            $("".chat_notify"").show();
                        }
                        // document.getElementById(""imgUrl"").src=imgUrl; <div class=""time"">02:30 PM</div>
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                   // alert(textStatus);
				   console.log(textStatus);
                }
            });
        }
        ////function PostToAgent(conversationId) {
        ////    var postURL = ""http://localhost:64811/test.aspx?ConversationId="" + conversationId;
        ////    //var postURL = ""https://web.press3.io//Test.aspx?ConversationId="" + conversationId;
        ////    var Data2 = JSON.stringify({
        ////        ""ConversationId");
                WriteLiteral(@""": conversationId
        ////    });
        ////    $.ajax({
        ////        type: ""GET"",
        ////        url: postURL,
        ////        dataType: ""json"",
        ////        async: false,
        ////        success: function (res) {
        ////            console.log(res);
        ////            if (res.message == ""success"") {
        ////                socketBindingURL = res.socketUrl;
        ////                success = 1;
        ////                // SubscribeToSocket();
        ////            }
        ////            //var a=JSON.parse(res)
        ////           //console.log(a);
        ////        },
        ////        error: function (jqXHR, textStatus, errorThrown) {
        ////            console.log(errorThrown);
        ////            console.log(textStatus);
        ////        }
        ////    });
        ////}
        $("".btnSubmit-sm"").on(""click"", function(){
            var buttval = $("".btnSubmit-sm"").text();
            $(""#message"").val(buttval);
            $(""");
                WriteLiteral(@"#send"").click();
        })
        function btnAction(obj) {
            var a = $(obj).attr('value');
            var selectEle = $(obj);

            if (a == ""Yes"" || a == ""No"") {
                selectEle.addClass(""select"");
                selectEle.parent().find(""button"").attr(""disabled"",""disabled"");
			    selectEle.parent().find(""button"").css(""cursor"",""not-allowed"");
                if (localStorage.getItem(""botQuestions"") != null) {
                    botQuestions = JSON.parse(localStorage.getItem(""botQuestions""));
                } else {
                    botQuestions = [];
                }
				conversationId = localStorage.getItem(""conversationId"");
                botQuestions.push(JSON.parse('{""question"":""' + selectEle.parent().parent().find(""p"").text() + '"",""Values"":""' + a + '"" ,""recipient_id"":""'+conversationId+'""}'));
                localStorage.setItem(""botQuestions"", JSON.stringify(botQuestions));
				endchat="""";
                $(""#message"").val(a);
                $(""#send"").click();");
                WriteLiteral(@"
            } else {

                if (!Optionlist.includes(a)) {
                    Optionlist.push(a);
                    selectEle.addClass(""select"");
                } else {
                    //Optionlist.pop(a);
                    var index;
                    if ((index = Optionlist.indexOf(a)) !== -1)
                        Optionlist.splice(index, 1);
                    selectEle.removeClass(""select"");
                }
                if ($(obj).attr('action') == ""submit"") {
                    selectEle.parent().find(""button"").attr(""disabled"",""disabled"");
                    selectEle.parent().find(""button"").css(""cursor"", ""not-allowed"");
					
					if (localStorage.getItem(""botQuestions"") != null) {
                    botQuestions = JSON.parse(localStorage.getItem(""botQuestions""));
					conversationId = localStorage.getItem(""conversationId"");
                    botQuestions.push(JSON.parse('{""question"":""' + selectEle.parent().parent().find(""p"").text() + '"",""Values"":""' + a + '"",""recipi");
                WriteLiteral(@"ent_id"":""'+conversationId+'""}'));
                    localStorage.setItem(""botQuestions"", JSON.stringify(botQuestions));
					endchat = """";
                    $(""#message"").val(a);
                    $(""#send"").click();

                    Optionlist = [];
					}
                }
            }
        }
        function submitAction(obj) {
            if (Optionlist.length > 0) {
                var options = """";
                for (var f = 0; f < Optionlist.length; f++) {
                    options += Optionlist[f];
                    options += "","";
                }
                options = options.substring(0, options.length - 1)

                $(""#message"").val(options);

                Optionlist = [];
            }
            else
                return false

            var selectEle = $(obj);
            if (localStorage.getItem(""botQuestions"") != null) {
                botQuestions = JSON.parse(localStorage.getItem(""botQuestions""));
            }
			conversationId = localStorage.getIt");
                WriteLiteral(@"em(""conversationId"");
            botQuestions.push(JSON.parse('{""question"":""' + selectEle.attr(""question"") + '"",""Values"":""' + options + '"",""recipient_id"":""'+conversationId+'""}'));
            localStorage.setItem(""botQuestions"", JSON.stringify(botQuestions));

            selectEle.parent().parent().find(""button"").attr(""disabled"",""disabled"");
			selectEle.parent().parent().find(""button"").css(""cursor"",""not-allowed"");
            $(""#send"").click();
        }
        function logRes(json) {
            console.log(json);
        }
        function SubscribeToSocket() {
            loadPing = 1;
            //var str = 'ws://staging-ping.telebu.com/support';
	  var str ='wss://chat-ping.telebu.com/support';

            if (isAgent == 1) {
                 console.log(""connect"");
            }
            else {
                var fromId = localStorage.getItem(""userId"");
                var qry = 'userId=' + fromId + '&mode=client';
                console.log(qry);
                //customerSocket = io.connec");
                WriteLiteral(@"t(str, { query: 'userId=' + userId + '&mode=client' })
               // customerSocket = io.connect(str, { query: qry })
                if (localStorage.getItem(""isDisconnect"") == ""0"" || localStorage.getItem(""isDisconnect"") ==  null) {
                    customerSocket = io.connect(str, { query: qry })
                }
                else {
					//try{
                   // customerSocket.connect();
					//}
					//catch (e) {
					//console.log(e);
					customerSocket = io.connect(str, { query: qry ,forceNew: true});
					//}
                }
			 
			  try{
               customerSocket.on('connect', function () {
                   console.log(""connected"");
                   isSocketSubscribed = 1;
                });
				}
				catch(e){}
				
				 customerSocket.on('disconnect', function () {
                   console.log(""disconnected"");
                   
                });

				
                conversationId = localStorage.getItem(""conversationId"");
                var agentId = localStorage.");
                WriteLiteral(@"getItem(""pingAgentId"");
               var IsPingAgent = localStorage.getItem(""IsPingAgent"");

                var cust_jsonObj;
                    if (IsPingAgent == ""true"") {
                        cust_jsonObj = { ""conversationId"": conversationId, ""from"": conversationId, ""to"": agentId, ""messageType"": ""0"", ""message"": ""Customer OnBoard"" };
                    } else {
                         cust_jsonObj = { ""conversationId"": conversationId, ""from"": fromId, ""to"": agentId, ""messageType"": ""0"", ""message"": ""Customer OnBoard"" };
                    }
                // var cust_jsonObj = { ""conversationId"": conversationId, ""from"": conversationId, ""to"": agentId, ""messageType"": ""0"", ""message"": ""Customer OnBoard"", ""mediaUrl"": """" };//
               // if (isReload == 0) {
				//	try{
					//customerSocket.emit('newMessage', cust_jsonObj, function (data) { console.log(data); });
					//}
					//catch(e){}
				
               // }
			try{
                customerSocket.on('newMessage', function (data) {
				try{
		");
                WriteLiteral(@"		if(msgIds.includes(data.id))
					return false;
				}
				catch(e){}
					msgIds.push(data.id);
                    console.log(data);
                   
				   //agentTimer = 100;
                   
					
						custChatCloserTimer = 0;
                    //agentTimer = 100;
                    chatcloser =0; //100
                    clearInterval(agentTimer);
                    clearInterval(timerArr[data.conversationId]);
                    timerArr[data.conversationId] = 0;
					localStorage.setItem(""chattimer"",chatcloser);
                    customerChatCloserTimer(data.conversationId);
					
					
                    	conversationId = localStorage.getItem(""conversationId"");
                        nowtime = new Date();
						receiveTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
                        var CustomerMsg2 = JSON.parse('{""recipient_id"":""agent_' + conversationId + '"",""text"":""' + data.message + '"",""timeStamp"":""' + receiveTime + '""}');
            ");
                WriteLiteral(@"            chatConversation = """";
                        convMsg = """";
                        chatConversation = localStorage.getItem(""ChatConversation"");

						if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
							chatConversation = chatConversation.slice(0, -1);
							convMsg = JSON.stringify(CustomerMsg2);
							chatConversation = chatConversation +"",""+ convMsg;
							chatConversation = chatConversation + ']';
							localStorage.setItem(""ChatConversation"",chatConversation);
							} else {
							localStorage.setItem(""ChatConversation"",JSON.stringify(CustomerMsg2));
                    }
                    if (IsPingAgent == ""true"") {
                        toSendConversation_Of_aAgent_Customer(data.message, 4);
                        conversationMessageId = localStorage.getItem(""ConversationMessageId"");
                        updateConversationMessage(conversationMessageId);
                    }
                    $(""#");
                WriteLiteral(@"conversation"").append('<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft""><p>' + data.message + '</p></div></div><div class=""time"">' + receiveTime + '</div></div>');
                     $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
                });
				}
				catch(e){}
            }
        }
        function InsertConversation(msg) {
              $.ajax({
                    type: ""GET"",
                    url: ""https://web.press3.io/TestAgentData.aspx"",
                    dataType: ""JSON"",
                    //async: false,
                              data: {
                                  type: 1, Message: msg, IsAgent: 0,
                                  ConversationId: localStorage.getItem(""conversationId""),
                                  ConversationMessageId: localStorage.getItem(""ConversationMessageId""),
                                  AgentChannel: localStorage.getItem(""AgentChannel"")
                    },
  ");
                WriteLiteral(@"                  success: function (res) {
                        console.log(res)
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(textStatus);
                    }
                });
        }
        function webSocketSubscription(AgentChannel) {
            //var domain = location.host
            var domain = $(""#hdnIp"").val();
            var host = (location.protocol === 'https:') ? 'wss://' : 'ws://';
            var page = '/ConferenceWebSocket.sub?Channel_Name=';
            var ws;
            //var hostTotal = ""wss://web.press3.io:199/ConferenceWebSocket.sub?Channel_Name=Agent_1517"";
            //var hostTotal = ""wss://web.press3.io:199/ConferenceWebSocket.sub?Channel_Name=Agent_1517"";
            //ws = webSocketRequestBinding.SubscribeWebSocket(hostTotal, 25);//25-->no of retrys,global_agentId--->agentid
            //ws = new WebSocket(hostTotal);
            console.log(hostTotal);
            ws.onopen = fun");
                WriteLiteral(@"ction (evt) {
                console.log(""WebSocket Connection Opened "");
                if (isAgent == 0) {
                    isSubscribed = 1;
                }
            };
            ws.onmessage = function (evt) {
                console.log(""Message "" + evt.data);
                var jsonData = """";
                if (typeof (evt.data) != ""undefined"" || evt.data != """") {
                    jsonData = JSON.parse(evt.data)
                    agentTimer = 40;
                    clearInterval(agentTimer);
                    if (jsonData.IsAgent == ""1"") {
						nowtime = new Date();
						receiveTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
                        var text = '<div class=""speechItem""><div class=""clearfix"">'
                        text = text + '<img src=""' + imgUrl + '"" alt="""" class=""left"" />'
                        text = text + '<div class=""speechLeft""><p>' + jsonData.Message + '</p></div></div>';
						text = text + '<div class=""time"">' ");
                WriteLiteral(@"+ receiveTime + '</div></div>';

                        conversationId = localStorage.getItem(""conversationId"");

                        var CustomerMsg2 = JSON.parse('{""recipient_id"":""agent_' + conversationId + '"",""text"":""' + jsonData.Message + '"",""timeStamp"":""' + receiveTime + '""}');
                        chatConversation = """";
                        convMsg = """";
                        chatConversation = localStorage.getItem(""ChatConversation"");
						if(conversationId == jsonData.ConversationId){
							if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
							chatConversation = chatConversation.slice(0, -1);
							convMsg = JSON.stringify(CustomerMsg2);
							chatConversation = chatConversation +"",""+ convMsg;
							chatConversation = chatConversation + ']';
							localStorage.setItem(""ChatConversation"",chatConversation);
							} else {
							localStorage.setItem(""ChatConversation"",JSON.stringify(CustomerMsg2));
							}
			");
                WriteLiteral(@"				updateConversationMessage(jsonData.ConversationMessageId);
							//toSendConversation_Of_aAgent_Customer(jsonData.Message,4);
							$(""#conversation"").append(text);
							//$(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                            $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
                        }
                        if ($('.iconClose').hasClass('hide')) {
                            msgCount = msgCount + 1;
                            $(""#notificationCount"").text(msgCount);
                            $("".chat_notify"").show();
                        } else {
                            msgCount = 0;
                            $(""#notificationCount"").text(msgCount);
                            $("".chat_notify"").hide();

                        }
                    }
                }
            };
            ws.onerror = function (evt) {
                console.log(""Trying again1"");
            };
            ws.onclose");
                WriteLiteral(@" = function (evt) {
                $(""#lblWebsocket"").htonclose = function () {
                    console.log(""WebSocket Connection Closed  :  "" + disconnected);
                };
            }
        }

        function customerWebSocketSubscription() {
            //var domain = location.host
            var domain = $(""#hdnIp"").val();
            var host = (location.protocol === 'https:') ? 'wss://' : 'ws://';
            var page = '/ConferenceWebSocket.sub?Channel_Name=';

            if (localStorage.getItem(""Customer_ChannelName"") == null) {
                CustomerChannelName = ""Customer_"" + uuidv4();
                localStorage.setItem(""Customer_ChannelName"", CustomerChannelName);
            }
            else {
                CustomerChannelName = localStorage.getItem(""Customer_ChannelName"");
            }
            var wsCust;
            var hostTotal = ""wss://web.press3.io:199/ConferenceWebSocket.sub?Channel_Name="" + CustomerChannelName;
            //var hostTotal = ""wss://web.press3.");
                WriteLiteral(@"io:199/ConferenceWebSocket.sub?Channel_Name=Agent_1517"";
            wsCust = webSocketRequestBinding.SubscribeWebSocket(hostTotal, 25);//25-->no of retrys,global_agentId--->agentid
            //ws = new WebSocket(hostTotal);
            console.log(hostTotal);
            wsCust.onopen = function (evt) {
                console.log(""WebSocket Connection Opened "");

            };
            wsCust.onmessage = function (evt) {
                console.log(""Message "" + evt.data);
                var jsonData = """", AgentName = """";
               // if (typeof (evt.data) != ""undefined"" || evt.data != """") {
			   wsCust.send(""ChatWidget message : "" + evt.data);
                    jsonData = JSON.parse(evt.data);
                localStorage.setItem(""IsPingAgent"", jsonData.Data.IsPingAgent)
                localStorage.setItem(""AgentId"", jsonData.Data.AgentChannel);
                    var AgentName;
                if (jsonData.Data.AgentName.length > 20) {
                    AgentName = jsonData.Data.AgentNam");
                WriteLiteral(@"e.substring(0, 16) + ""..."";
                }
                else {
                     AgentName = jsonData.Data.AgentName;
                }


                    $(""#custName"").text(AgentName);
                    localStorage.setItem(""AgentName"", AgentName);
               // $(""#custName"").text(jsonData.Data.AgentName);
                       var msg=""You are now connected to ""+AgentName
					  						   var name=""isAgentconnected_""+jsonData.Data.ConversationId;
					   localStorage.setItem(name,1);
					  // toSendConversation_Of_aAgent_Customer(msg, 4);
					    var jsnMsg='[{""text"":""' + msg + '""}]';
					   toSendConversation_Of_aAgent_Customer(jsnMsg, 2);
                       nowtime = new Date();
						receiveTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
                        var text = '<div class=""speechItem""><div class=""clearfix"">'
                        text = text + '<img src=""' + imgUrl + '"" alt="""" class=""left"" />'
                        text = te");
                WriteLiteral(@"xt + '<div class=""speechLeft""><p>' + msg + '</p></div></div>';
						text = text + '<div class=""time"">' + receiveTime + '</div></div>';

                        conversationId = localStorage.getItem(""conversationId"");

                        var CustomerMsg2 = JSON.parse('{""recipient_id"":""agent_' + conversationId + '"",""text"":""' + msg + '"",""timeStamp"":""' + receiveTime + '""}');
                        chatConversation = """";
                        convMsg = """";
                        chatConversation = localStorage.getItem(""ChatConversation"");

							if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
							chatConversation = chatConversation.slice(0, -1);
							convMsg = JSON.stringify(CustomerMsg2);
							chatConversation = chatConversation +"",""+ convMsg;
							chatConversation = chatConversation + ']';
							localStorage.setItem(""ChatConversation"",chatConversation);
							} else {
							localStorage.setItem(""ChatConversation"",JSON");
                WriteLiteral(@".stringify(CustomerMsg2));
							}
							$(""#conversation"").append(text);
							//$(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                            $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");

					 chatcloser =0;
						  custChatCloserTimer = 0;
						  localStorage.setItem(""chattimer"",chatcloser);
					customerChatCloserTimer(conversationId)
					
                    var token = getToken();
                    if (jsonData.Data.IsPingAgent == true) {
                        var pingAgentMobile=jsonData.Data.AgentMobile;
                        GetPingUserId(pingAgentMobile);
                    }
                    else {
                        var agentChannel=""Hub_""+jsonData.Data.AgentChannel
                          localStorage.setItem(""pingAgentId"",agentChannel );
                    }
                    PingConversation();
                    SubscribeToSocket();
					
			  conversationId = localStorage.getItem(""conversationId"");
");
                WriteLiteral(@"                var agentId = localStorage.getItem(""pingAgentId"");
               var IsPingAgent = localStorage.getItem(""IsPingAgent"");
			   var fromId = localStorage.getItem(""userId"");
			   
				var cust_jsonObj;
                    if (IsPingAgent == ""true"") {
                        cust_jsonObj = { ""conversationId"": conversationId, ""from"": conversationId, ""to"": agentId, ""messageType"": ""0"", ""message"": ""Customer OnBoard"" };
                    } else {
                         cust_jsonObj = { ""conversationId"": conversationId, ""from"": fromId, ""to"": agentId, ""messageType"": ""0"", ""message"": ""Customer OnBoard"" };
                    }
					   customerSocket.emit('newMessage', cust_jsonObj, function (data) { console.log(data); });
					   
					   var customerDetails="""";
					var details=JSON.parse(localStorage.getItem(""callerDetails""));
					if(details != null){
					if(details.hasOwnProperty(""Email""))
					  customerDetails=""Name:""+localStorage.getItem(""callerName"")+"",Mobile:""+localStorage.getItem(""callerMo");
                WriteLiteral(@"bile"")+"",Email:""+details.Email;
					else
					 customerDetails=""Name:""+localStorage.getItem(""callerName"")+"",Mobile:""+localStorage.getItem(""callerMobile"");
					console.log(customerDetails);
					
					 if (IsPingAgent == ""true"") {
                        cust_jsonObj = { ""conversationId"": conversationId, ""from"": conversationId, ""to"": agentId, ""messageType"": ""0"", ""message"": customerDetails };
                    } else {
					  if(customerDetails.includes(""Name:""))
						customerDetails = customerDetails.replace(/,/g, '<br>');
                         cust_jsonObj = { ""conversationId"": conversationId, ""from"": fromId, ""to"": agentId, ""messageType"": ""0"", ""message"": customerDetails };
                    }
					 customerSocket.emit('newMessage', cust_jsonObj, function (data) { console.log(data); });
					  
					  toSendConversation_Of_aAgent_Customer(customerDetails, 3);
					  }



             //   }
            };
            wsCust.onerror = function (evt) {
			 customerWebSocketSubscription();
             ");
                WriteLiteral(@"   console.log(""Trying again1"");
            };
            wsCust.onclose = function (evt) {
				 customerWebSocketSubscription();
                console.log(""CustomerWebSocket Connection Closed  :  "");

            }
        }
        function uuidv4() {
          return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
          );
        }

        function toSendConversation_Of_aAgent_Customer(agentMsg,MsgTypeId) {
            var g=");
#nullable restore
#line 1441 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
             Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 1442 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 1443 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
            //var url = ""http://hubchat.com"";
            var url =""https://hub-chat.telebu.com"";
            var imgUrl = url + ""/StaticFiles/images/Sender-sm.png"";
            is_endreason = localStorage.getItem(""isEndReason"");
			conversationId = localStorage.getItem(""conversationId"");
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/""+is_endreason+""/replies/"";

            var Data2 = JSON.stringify({
                ""MessageTypeId"": MsgTypeId,
                ""Message"": agentMsg
               //  localStorage.getItem(""userId"")
            });
            $.ajax({
                type: ""POST"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: Data2,
                success: function (res) {
                    console.log(""Inserted successfully."");
                    console.log(res.Id)
                    if (res.Id != n");
                WriteLiteral(@"ull) {
                        localStorage.setItem(""ConversationMessageId"", res.Id);
                    }
            //          conversationId = localStorage.getItem(""conversationId"");

            //var CustomerMsg1 = JSON.parse('{""recipient_id"":""agent_' + conversationId + '"",""text"":""' + agentMsg + '""}');
            //chatConversation = """";
            //convMsg = """";
            //chatConversation = localStorage.getItem(""ChatConversation"");
            //if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
            //            chatConversation = chatConversation.slice(0, -1);
            //            convMsg = JSON.stringify(CustomerMsg1);
            //            chatConversation = chatConversation +"",""+ convMsg;
            //            chatConversation = chatConversation + ']';
            //            localStorage.setItem(""ChatConversation"",chatConversation);
            //        } else {
            //            localSt");
                WriteLiteral(@"orage.setItem(""ChatConversation"",JSON.stringify(CustomerMsg1));
            //        }

                     },
                error: function (jqXHR, textStatus, errorThrown) {
                   // alert(textStatus);
				    console.log(textStatus);
                }
            });


        }
       function GetAgentsForHubchat() {
           var WidgetId =");
#nullable restore
#line 1495 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                    Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n           var AccountId =");
#nullable restore
#line 1496 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
           var url = ""https://hub-chat.telebu.com"";
           var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + localStorage.getItem(""conversationId"") + ""/customerchannel/"" + localStorage.getItem(""Customer_ChannelName"") + ""/action/NEWCHAT""
           var f_isPing = 0;
           $.ajax({
                    url: url2,
                    type: 'POST',
                    data: {},
                    dataType: 'JSON',
                    success: function(result) {
                        console.log(result);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(errorThrown);
						console.log(textStatus);
                    }
                });
           return f_isPing;
        }
         function UpdateAgentsForHubchat(status, agentId) {
           //  var postURL = ""http://localhost:64811/InsertAgents.aspx"";
            var postURL = ""https://web.press3.com/InsertAgents.aspx"";

        ");
                WriteLiteral(@"    $.ajax({
                type: ""GET"",
				url:postURL ,
				dataType: ""JSON"",
				async: false,
				data: { type: 1 ,AgentId:agentId,Status:status},
                success: function (res) {
                    console.log(res);

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(errorThrown);
                    console.log(textStatus);
                }
            });
        }

         function updateConversationMessage(conversationMessageId) {
                var g=");
#nullable restore
#line 1537 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                 Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 1538 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 1539 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
           // var url = ""http://hubchat.com"";
             var url =""https://hub-chat.telebu.com"";
            var imgUrl = url + ""/StaticFiles/images/Sender-sm.png"";
             is_endreason = localStorage.getItem(""isEndReason"");
            // conversationMessageId = 501;
             conversationId = localStorage.getItem(""conversationId"");
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/""+conversationMessageId+""/UpdateStatusOfMsg/"";
         //  http://hubchat.com/accounts/1/widgets/1/Conversations/2/420/UpdateStatusOfMsg

            $.ajax({
                type: ""POST"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                success: function (res) {
                    console.log(""Inserted successfully."");


                     },
                error: function (jqXHR, textStatus, errorThrown) {
      ");
                WriteLiteral(@"              //alert(textStatus);
					 console.log(textStatus);
                }
            });


        }
        function isEmail(Email) {
            return true;

        }
        function InsertCustomerInformation(AccountId, callerName, callerMobile, details) {
            // GetConversationMessages(190); ""http://qa.press3.com/TestAgentData.aspx""
              $.ajax({
        type: ""GET"",
        url: ""https://web.press3.io/TestAgentData.aspx"",
        dataType: ""JSON"",
        //async: false,
                  data: {
                      type: 2, AccountId: AccountId, Name: callerName,Mobile: callerMobile,Details: details
        },
        success: function (res) {
            console.log(res)
            //GetConversationMessages(res.customerId);
            var CName = res.customerName;

           localStorage.setItem(""ActualCustomerName"", res.customerName);
            if (CName.length > 20) {
                CName = CName.substring(0,16)+""..."";
            }
            localStorage.setIt");
                WriteLiteral(@"em(""customerId"", res.customerId);
            localStorage.setItem(""customerName"",  res.customerName);
            localStorage.setItem(""IsCustomerExists"", res.IsExist);

            if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""At the start of the conversation"") {
                if (res.IsExist == ""0"") {
                 loadChatWidget();
                 UpdateCustomerId(res.customerId);
                } else if (res.IsExist == ""1"") {
                    $(""#custName"").text(localStorage.getItem(""ActualCustomerName""));
                $(""#chatWindow"").addClass(""hide"");
                  GetConversationMessages(""1"");
                if (localStorage.getItem(""NoPreviewsData"") != ""1"") {
                     $(""#chatWindow"").addClass(""hide"");
                    $(""#ExistingUser"").show();
                } else {
                    $(""#chatWindow"").removeClass(""hide"");
                    loadChatWidget();
                    UpdateCustomerId(localStorage.getItem(""customerId""));
                }
 ");
                WriteLiteral(@"           } else if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""Before connecting to an agent"") {
                    ///here we need patch with Agent
                    if (res.IsExist == ""0"") {
                        UpdateCustomerId(res.customerId);
                    } else if (res.IsExist == ""1"") {
                        //load old conversation messages
                    }
            } else if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""After agent is connected"") {

            }





            }

        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus);
        }
    });
        }

        function customerTimer() {
            var imgUrl = url + ""/StaticFiles/images/BotIcon.png"";
            var MaxWaitTimer = localStorage.getItem(""MaxWaitTimeToAgent"");
            agentTimer = 1;
            custTimer = setInterval(function () {
                agentTimer++;
                if (agentTimer == MaxWaitTimer && isSocketSubscrib");
                WriteLiteral(@"ed == 0 && isSubscribed == 0) {
  		nowtime = new Date();
                    sentTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
                    $(""#conversation"").append('<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft""><p>' + localStorage.getItem(""CustomerWaitTimeforAgentConnect"") + '</p></div></div><div class=""time"">' + sentTime + '</div>');
                    $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");

                    clearInterval(custTimer);
                    custTimer = 0;
                    EndCustomerChat();
                    //$("".startOver"").children().attr(""ActualConversationId"", ActualConversationId);
					localStorage.setItem(""Startoverenabled"", ""true"");
                    $("".startOver"").show();
                    $("".typeArea"").hide();
                    localStorage.setItem(""IsCustomerExists"", 1);
                    $(""#customerAllChats"").trigger(""click"");
  ");
                WriteLiteral(@"              }
                else if (agentTimer > MaxWaitTimer) {
                    clearInterval(custTimer);
                    custTimer = 0;
                } 

            }, 1000);

        }
        function EndCustomerChat() {
            var WidgetId =");
#nullable restore
#line 1667 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n           var AccountId =");
#nullable restore
#line 1668 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
            var url = ""https://hub-chat.telebu.com"";
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + localStorage.getItem(""conversationId"") + ""/customerchannel/"" + localStorage.getItem(""Customer_ChannelName"") + ""/action/REMOVECHAT""
            $.ajax({
                url: url2,
                type: 'POST',
                data: {},
                    dataType: 'JSON',
                    success: function(result) {
                        console.log(result);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(errorThrown);
						console.log(textStatus);
                    }
                });
        }

        function UpdateCustomerId(customerId) {
                var g=");
#nullable restore
#line 1687 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                 Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 1688 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 1689 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
            //var url = ""http://hubchat.com"";
             var url =""https://hub-chat.telebu.com"";
            var imgUrl = url + ""/StaticFiles/images/Sender-sm.png"";
             conversationId = localStorage.getItem(""conversationId"");
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/""+customerId+""/UpdateCustomerId/"";
         //  http://hubchat.com/accounts/1/widgets/1/Conversations/2/420/UpdateStatusOfMsg

            $.ajax({
                type: ""POST"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                success: function (res) {
                    console.log(""Inserted successfully."");


                     },
                error: function (jqXHR, textStatus, errorThrown) {
                   // alert(textStatus);
				    console.log(textStatus);
                }
            });



        }

     ");
                WriteLiteral(@"   function GetConversationMessages(chats) {
            //var customerId = 190;
            //var customerName = ""raja"";

            var customerId = localStorage.getItem(""customerId"");
            var customerName = localStorage.getItem(""ActualCustomerName"");
                var g=");
#nullable restore
#line 1725 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                 Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 1726 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 1727 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
            //var url = ""http://hubchat.com"";
             var url =""https://hub-chat.telebu.com"";
            var imgUrl = url + ""/StaticFiles/images/Sender-sm.png"";
             conversationId = localStorage.getItem(""conversationId"");
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/""+customerId+""/GetConversationsOfCustomer/"";
         //  http://hubchat.com/accounts/1/widgets/1/Conversations/2/420/UpdateStatusOfMsg

            $.ajax({
                type: ""GET"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                success: function (res) {
                    if (res.length > 0) {
                        localStorage.setItem(""OldConversationChat"", """")
                        localStorage.setItem(""OldConversationChat"", JSON.stringify(res));

                        if (chats == ""1"") {
                            $(""#CusOldConver");
                WriteLiteral(@"sations"").html("""");
                        } else {
                            $(""#allConversations"").html("""");
                        }
                        for (var n = res.length - 1; n >= 0; n--) {
                            var chatBox = """";
                            var lastMessage = """";
                            var lastTime = """";
                            var lastMessageTypeId = 0;
                            for (q = res[n].ConversationMessages.length - 1; q >= 0; q--) {
                                lastMessage = res[n].ConversationMessages[q].Message
								if(lastMessage == ""EndChat from Customer"" || lastMessage.includes(""Name:"")){
									 lastMessage = res[n].ConversationMessages[q-1].Message;
									   lastMessageTypeId = res[n].ConversationMessages[q-1].MessageTypeId;
                                lastTime = new Date(res[n].ConversationMessages[q-1].CreatedTimeUTC.replace('T', ' ') + 'Z');
									 }
									 else{
									 lastMessage = res[n].ConversationMessages[q].M");
                WriteLiteral(@"essage;
                                lastMessageTypeId = res[n].ConversationMessages[q].MessageTypeId;
                                lastTime = new Date(res[n].ConversationMessages[q].CreatedTimeUTC.replace('T', ' ') + 'Z');
								}
                                break;
                            }

                            if (lastMessageTypeId == 2) {
                                lastMessage = JSON.parse(lastMessage);
                                for (var o = 0; o < lastMessage.length; o++) {
                                    if (lastMessage[o].text != undefined)
                                        lastMessage = lastMessage[o].text;

                                    if (lastMessage[o].custom == undefined) { }
                                    else if (lastMessage[o].custom[0].text != """" && lastMessage[o].custom[0].text != null && lastMessage[o].custom[0].text != undefined) {
                                        lastMessage = lastMessage[o].custom[0].text;
                    ");
                WriteLiteral(@"                }
                                }
                            }
                            // console.log(lastMessage);
                            // console.log(lastTime);

                            // var r = 0;
                            //r = n+1;
                            // customerName = customerName + ' ' +r;
                            chatBox += '<a conversationId = ""' + res[n].ConversationId + '"" AssignedAgent = ""' + res[n].AssignedAgent + '"" class=""chatBoxlist"" ><div class=""chat_box clearfix"">';
                            chatBox += '<div class=""use_dp"">';
                            chatBox += '<img src=""https://hub-chat.telebu.com/StaticFiles/images/user_default.png"" alt=""profile"" />';
                            chatBox += '</div>';
                            chatBox += '<div class=""chat_cont"">';
                            //chatBox += '<h5>' + customerName.substring(0, 20) + '</h5>';
							chatBox += '<h5>' + res[n].AssignedAgent + '</h5>';
                        ");
                WriteLiteral(@"    if (lastMessage.length > 0) {
                                chatBox += '<p>' + lastMessage.substring(0, 30) + '</p>';
                            }
                            chatBox += '</div>';
                            chatBox += '<div class=""details"">' + GetReadableTimeDiff(lastTime) + '</div>';
                            chatBox += '</div></a>';
                            if (chats == ""1"") {
                                if (res.length >= 3) {
                                    if (n > res.length - 3)
                                        $(""#CusOldConversations"").append(chatBox);
                                } else {
                                    $(""#CusOldConversations"").append(chatBox);
                                }

                            } else {
                                $(""#allConversations"").append(chatBox);
                            }



                        }
                        localStorage.setItem(""NoPreviewsData"",""0"");
                    } el");
                WriteLiteral(@"se {
                        console.log(""no data found"");
                        localStorage.setItem(""NoPreviewsData"",""1"");
                    }

                     },
                error: function (jqXHR, textStatus, errorThrown) {
                   // alert(textStatus);
				    console.log(textStatus);
                }
            });


        }
        $(document).delegate(""#customerAllChats"", ""click"", function () {
            if (localStorage.getItem(""IsCustomerExists"") == ""0"") {
              //  return false;
                if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""At the start of the conversation"") {
                   $(""#chatWindow"").addClass(""hide"");
                    GetConversationMessages(""0"");
                   $(""#AllChats"").show();
                } else {
                    return false;
               }
                
            } else {
                $(""#chatWindow"").addClass(""hide"");
               GetConversationMessages(""0"");
	                $(""#AllC");
                WriteLiteral(@"hats"").show();
            }

        });


        $(document).delegate(""#back"", ""click"", function () {
            if (localStorage.getItem(""conversationId"") == 0 || localStorage.getItem(""conversationId"") == null || localStorage.getItem(""conversationId"") == ""undefined"") {
                if (localStorage.getItem(""NoPreviewsData"") == ""0"") {
                   // funGetWidget(widgetUUID);
                    //GetConversationMessages(""1"");
                    $(""#AllChats"").hide();
                    $(""#ExistingUser"").show();
                    return false;
                }
            } else {
                $(""#AllChats"").hide();
                $(""#chatWindow"").removeClass(""hide"");
                $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
            }
        });

        $(document).delegate(""#CusAllChats"", ""click"", function () {
            $(""#ExistingUser"").hide();
            $(""#chatWindow"").addClass(""hide"");
            GetConversationMessages(""0"");
	        $(""#AllChats"").show()");
                WriteLiteral(@";
        });
        $(document).delegate(""#CusNewChat"", ""click"", function () {
            endchat = """";
            localStorage.setItem(""isEndReason"", 0);
            $("".startOver"").hide();
           // $("".typeArea"").show();
            $(""#conversation"").html("""");
            $(""#ExistingUser"").hide();
            loadChatWidget();
            UpdateCustomerId(localStorage.getItem(""customerId""));
			localStorage.setItem(""Startoverenabled"",""false"");
			localStorage.setItem(""oldStartoverenabled"",""true"");

        });

        $(document).delegate(""#startNewConversation"", ""click"", function () {
			var oldStrtovr=localStorage.getItem(""oldStartoverenabled"");
			var name=""isAgentconnected_""+localStorage.getItem(""conversationId"");
			if(oldStrtovr == null || oldStrtovr == undefined){
				localStorage.setItem(""oldStartoverenabled"",""true"");
				oldStrtovr=localStorage.getItem(""oldStartoverenabled"");
				}
				if(localStorage.getItem(""Startoverenabled"") == null || localStorage.getItem(""Startoverenabled"") == und");
                WriteLiteral(@"efined){
								localStorage.setItem(""Startoverenabled"",""false"");
				}
               if ((oldStrtovr == ""true"" || oldStrtovr == ""false"") && localStorage.getItem(""Startoverenabled"") == ""false"" )
			  // && $(this).attr(""ActualConversationId"") != localStorage.getItem(""conversationId""))
            {
			if(localStorage.getItem(""isEndReason"")== ""0"" &&(localStorage.getItem(name)== ""0"" ||localStorage.getItem(name) == null || localStorage.getItem(name) == undefined )){
			conversationId=localStorage.getItem(""conversationId"");
			if(conversationId != null || conversationId != undefined){
			UpdateTocloseChat(1,conversationId);
			localStorage.setItem(""Startoverenabled"",""true"");}
			}
			else{
				$(""#strtOverText"").show();
                setTimeout(function () {
                   $(""#strtOverText"").hide();
             },3000);
			 return false;
			 }
            }

            endchat = """";
            localStorage.setItem(""isEndReason"", 0);
			if(localStorage.getItem(""Startoverenabled"") == null || localStorage");
                WriteLiteral(@".getItem(""Startoverenabled"") == undefined)
			{
			localStorage.setItem(""oldStartoverenabled"",""true"");
			}
			else{localStorage.setItem(""oldStartoverenabled"",localStorage.getItem(""Startoverenabled""));}
			localStorage.setItem(""Startoverenabled"",""false"")
             $("".startOver"").hide();
           // $("".typeArea"").show();
             $(""#conversation"").html("""");
            $(""#AllChats"").hide();
            loadChatWidget();
            UpdateCustomerId(localStorage.getItem(""customerId""));

        });
        $(document).delegate(""#startOverBtn"", ""click"", function () {
            	var oldStrtovr=localStorage.getItem(""oldStartoverenabled"");
		var name=""isAgentconnected_""+localStorage.getItem(""conversationId"");
		if(oldStrtovr == null || oldStrtovr == undefined)
				localStorage.setItem(""oldStartoverenabled"",""true"");
               if (oldStrtovr == ""true"" && localStorage.getItem(""Startoverenabled"") == ""false""
			&& $(this).attr(""ActualConversationId"") != localStorage.getItem(""conversationId""))
       ");
                WriteLiteral(@"     {
				if(localStorage.getItem(""isEndReason"")== ""0"" && (localStorage.getItem(name)== ""0"" ||localStorage.getItem(name) == null || localStorage.getItem(name) == undefined )){
			conversationId=localStorage.getItem(""conversationId"");
			UpdateTocloseChat(1,conversationId);
			localStorage.setItem(""Startoverenabled"",""true"");
			}
			else{
				 $("".poweredBy"").html(""You can't startover another conversation as there is an active conversation"");
				   $("".poweredBy"").css(""color"",""red"");
                setTimeout(function () {
					 $("".poweredBy"").html(""Powered by Telebu"");
					   $("".poweredBy"").css(""color"",""#c6cfd6"");
             },3000);
			 return false;
			 }
            }
			localStorage.setItem(""Startoverenabled"", ""false"");
            localStorage.setItem(""OldConversationIdActive"", $(this).attr(""ActualConversationId""));
            localStorage.setItem(""OldConversationIdActivetrue"", ""1"");
            localStorage.setItem(""conversationId"", $(this).attr(""ActualConversationId""));
         //   UpdateToc");
                WriteLiteral(@"loseChat(0, $(this).attr(""ActualConversationId""));
			if(localStorage.getItem(""conversationId"") == localStorage.getItem(""OldConversationIdActive"") && localStorage.getItem(""OldChatConversationId"") == """" )
			{
			  localStorage.setItem(""oldIsEndReason"", 1);
			}
            if (localStorage.getItem(""oldIsEndReason"") == ""0"") {
                localStorage.setItem(""IsUsed"", 1);
                $("".btnSubmit-sm"").removeAttr(""disabled"");
                $("".btnSubmit-sm"").removeAttr(""style"");
                $("".startOver"").hide();
                $("".typeArea"").hide();
            } else if (localStorage.getItem(""oldIsEndReason"") == ""1"" ){//&& localStorage.getItem(""OldChatConversationId"")== """") {
				 UpdateTocloseChat(0, $(this).attr(""ActualConversationId""));
                $("".typeArea"").attr(""ConversationId"", $(this).attr(""ActualConversationId""));
                $("".startOver"").hide();
                $("".typeArea"").show();
                GetAgentsForHubchat();
				endchat = ""Endchat"";
            }
			// e");
                WriteLiteral(@"lse if (localStorage.getItem(""oldIsEndReason"") == ""1"" && localStorage.getItem(""OldChatConversationId"")!= """") {
			 // $("".poweredBy"").html(""You cant startover another conversation"");
			//	   $("".poweredBy"").css(""color"",""red"");
            //    setTimeout(function () {
			//		 $("".poweredBy"").html(""Powered by Telebu"");
			//		   $("".poweredBy"").css(""color"",""#c6cfd6"");
           //  },3000);
			// return false;
			// }
			else{
			$("".typeArea"").attr(""ConversationId"", $(this).attr(""ActualConversationId""));
			 UpdateTocloseChat(0, $(this).attr(""ActualConversationId""));
                $("".startOver"").hide();
                $("".typeArea"").show();
                GetAgentsForHubchat();
				msgIds=[];
				endchat = ""Endchat"";
			}


        });


        $(document).delegate("".chatBoxlist"", ""click"", function () {
            var currentConversationId = $(this).attr(""conversationId"");
			var conEndchat=getConversationEndchat(currentConversationId);
			var AssignedAgent= $(this).attr(""AssignedAgent"");
          ");
                WriteLiteral(@"  var OldConversationChat = {};
            var ActualConversationId = """";
            var isEndChatCon = 0;
			var CId = localStorage.getItem(""conversationId"");
            localStorage.setItem(""oldIsEndReason"", 0);
            OldConversationChat = JSON.parse(localStorage.getItem(""OldConversationChat""));
            if (OldConversationChat.length > 0) {
                for (var r = OldConversationChat.length - 1; r >= 0; r--) {
                    if (OldConversationChat[r].ConversationId == currentConversationId) {
                        {
                            ActualConversationId = OldConversationChat[r].ConversationId
                            $(""#conversation"").html("""");
                            for (var j = 0; j < OldConversationChat[r].ConversationMessages.length; j++) {
                                var reopenOldConversation = JSON.stringify(OldConversationChat[r].ConversationMessages)
                                var retValue2 = OldConversationChat[r].ConversationMessages[j].Messag");
                WriteLiteral(@"e;
                                var messageTypeId = OldConversationChat[r].ConversationMessages[j].MessageTypeId;
                                //console.log(retValue2)
                                var resMsg2 = OldConversationChat[r].ConversationMessages[j].Message;
                                var msgTime2 = new Date(OldConversationChat[r].ConversationMessages[j].CreatedTimeUTC.replace('T', ' ') + 'Z');
                                
                                var CurrTime = new Date();
                                //console.log(msgTime2.getFullYear());
                                if ((msgTime2.getFullYear() == CurrTime.getFullYear()) && (msgTime2.getMonth() == CurrTime.getMonth()) && (msgTime2.getDay() == CurrTime.getDay())) {
                                    msgTime2 = msgTime2.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
                                } else {
                                    msgTime2 = msgTime2.toLocaleString();
                 ");
                WriteLiteral(@"               }
                                // new Date(res.ConversationMessages[i].CreatedTimeUTC.replace('T', ' ') + 'Z');
                                // var recipient_id2 = retValue2.recipient_id;
                                butt = """";

                                if (messageTypeId == 2) {
                                    imgUrl = ""https://hub-chat.telebu.com/StaticFiles/images/BotIcon.png"";
                                    resMsg2 = JSON.parse(resMsg2);
                                    for (var o = 0; o < resMsg2.length; o++) {
                                        try {
                                            if (resMsg2[o].buttons == undefined) { }
                                            else {
                                                if (resMsg2[o].buttons.length > 0) {
                                                    butt = """";
                                                    butt = '<div class=""mt-2"">';
                                                 ");
                WriteLiteral(@"   for (var i = 0; i < resMsg2[o].buttons.length; i++) {
                                                        if (resMsg2[o].buttons[i].payload == ""submit"") {
                                                            butt = butt + '<hr class=""mt-2 mb-3 chat-hr"">'
                                                            butt = butt + '<div class=""center""><button type=""button"" question=""' + resMsg2[o].text +'"" onclick=""submitAction(this)"" value=""Submit"" class=""btnSubmit small mr-2 mb-2 "" disabled=""disabled"" style=""cursor:not-allowed"">Submit</button></div>'
                                                        }
                                                        else
                                                            butt = butt + '<button type=""button"" onclick=""btnAction(this)"" value=""' + resMsg2[o].buttons[i].title + '"" class=""btnSubmit-sm mr-2 mb-2 "" disabled=""disabled"" style=""cursor:not-allowed"">' + resMsg2[o].buttons[i].title + '</button>';
                                           ");
                WriteLiteral(@"         }
                                                    butt = butt + '</div>';
                                                }
                                            }
                                        }
                                        catch (e) { console.log(e); }

                                         var conversation = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                        conversation = conversation + '<p>' + resMsg2[o].text + '</p>' + butt + '</div> </div><div class=""time"">' + msgTime2 + '</div>';
                                        if(resMsg2[o].text !=undefined )
                                        $(""#conversation"").append(conversation);
										
																	 if (resMsg2[o].hasOwnProperty(""attachment"")) {
										 if (resMsg2[o].attachment.type == ""video"") {
											var video_url = resMsg2[o].attachment.payload.src;
											var text1 = '<div cl");
                WriteLiteral(@"ass=""video-container""> <iframe src=""' + video_url + '"" frameborder=""0"" allowfullscreen></iframe> </div>'
											$(""#conversation"").append(text1);
                                             $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
											 }
											 }

                                        if (resMsg2[o].custom == undefined){}
                                        else if (resMsg2[o].custom[0].text != """" && resMsg2[o].custom[0].text != null && resMsg2[o].custom[0].text != undefined && resMsg2[o].custom[0].text != ""https://i.ibb.co/34D8SNY/grptalk.jpg"" ) {
                                           	                                            if (ActualConversationId == CId) {
                                                endchat = ""TalkingToAgent"";
                                                localStorage.setItem(""isEndReason"", 1);
                                                //customerWebSocketSubscription();
                                                isEndChatCon = ");
                WriteLiteral(@"1;
                                            }
											else if (ActualConversationId != CId) {
                                                localStorage.setItem(""oldIsEndReason"",1);
												 endchat = ""TalkingToAgent"";
												  isEndChatCon = 1;
                                            }
                                            var conversation = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""/><div class=""speechLeft"">';
                                            conversation = conversation + '<p>' + resMsg2[o].custom[0].text + '</p>' + butt + '</div></div><div class=""time"">' + msgTime2 + '</div>';
                                        $(""#conversation"").append(conversation);
                                        }
                                   // }
									else if(resMsg2[o].custom[0].payload == ""image"")
										{
											var grptlk=resMsg2[o].custom[0].text;
											var text1 = '<div class=""speechItem""><div class=""clearfi");
                WriteLiteral(@"x""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
											//text1 = text1 + '<a href=grptlk><img width=""20%"" height=""20%"" src=""' + grptlk+ '"" alt="""" ><a></div></div>';
											text1 = text1 + '<a href=""'+grptlk+'"" target=""_blank"">'+grptlk+'<a></div></div>';
											$(""#conversation"").append(text1);
                                            $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
										}
                                    }


                                } else if (messageTypeId == 1 && resMsg2 != ""success"" && resMsg2 != ""hi"") {
                                    if (resMsg2 == ""/affirm{\""group\"":\""Yes\""}""){
                                           resMsg2 = ""Yes"";
                                    }
                                    else if (resMsg2 == ""/deny{\""group\"":\""No\""}"") {
                                         resMsg2 = ""No"";
                                    }
                                    if (resMsg2 == ""Yes"" || resMsg2 == ");
                WriteLiteral(@"""No"")
                                        $("".formBase"").find('button[value=""' + resMsg2 + '""]').last().addClass(""select"");
                                    else {
                                        var resmsg2Arr = resMsg2.split(',');
                                        if (resmsg2Arr.length > 1)
                                        {
                                            for (var z = 0; z < resmsg2Arr.length; z++) {
                                                $("".formBase"").find('button[value=""' + resmsg2Arr[z] + '""]').addClass(""select"");
                                            }
                                        }
                                        else
                                            $("".formBase"").find('button[value=""' + resMsg2 + '""]').addClass(""select"");
                                    }
                                    var text = '<div class=""speechItem right""><div class=""speechRight"">';
                                        text = text ");
                WriteLiteral(@"+ '<p>' + msg + '</p></div>';
			                            text = text + '<div class=""time"">' + sentTime + '</div></div>';

                                    var conversation = '<div class=""speechItem right""><div class=""speechRight"">';
                                    conversation = conversation + '<p>' + resMsg2 + '</p></div>';
                                    conversation = conversation + '<div class=""time"">' + msgTime2 + '</div></div>';
                                    $(""#conversation"").append(conversation);
                                }
                                  else if (messageTypeId == 3 && resMsg2 != ""EndChat from Customer"") {
								  if(!resMsg2.includes(""Name:"")){ 
								  isEndChatCon = 1;
                                    var conversation = '<div class=""speechItem right""><div class=""speechRight"">';
                                    conversation = conversation + '<p>' + resMsg2 + '</p></div>';
                                    conversation = conversation + '<div c");
                WriteLiteral(@"lass=""time"">' + msgTime2 + '</div></div>';
                                    $(""#conversation"").append(conversation);
									}
                                } else if (messageTypeId == 4 && resMsg2 != ""EndChat from Customer"") {
								isEndChatCon = 1;
                                    imgUrl = ""https://hub-chat.telebu.com/StaticFiles/images/Sender-sm.png"";
                                    var conversation = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                    conversation = conversation + '<p>' + resMsg2 + '</p>' + butt + '</div><div class=""time"">' + msgTime2 + '</div></div>';
                                    $(""#conversation"").append(conversation);

                                }
                                //if (resMsg2 != ""undefined"" && resMsg2 != undefined) {
                                //    $(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1");
                WriteLiteral(@"000);
                                //}

                                // document.getElementById(""imgUrl"").src=imgUrl; <div class=""time"">02:30 PM</div>
                            }
                            $(""#AllChats"").hide();
                            $(""#ExistingUser"").hide();
                            var CId = localStorage.getItem(""conversationId"");
                            if (isEndChatCon == 0) {
                                endchat = """";
                                localStorage.setItem(""isEndReason"", 0);
                            }
                            if (ActualConversationId != CId) {
                                localStorage.setItem(""OldChatConversationId"", ActualConversationId);
                                localStorage.setItem(""reopenOldConversation"",reopenOldConversation )
                                $("".startOver"").children().attr(""ActualConversationId"", ActualConversationId);
                                //$("".startOver"").show();
                  ");
                WriteLiteral(@"             // $("".typeArea"").hide();
							   if (conEndchat == 1)
                                {
										$("".startOver"").children().attr(""ActualConversationId"", currentConversationId);
										$("".startOver"").show();
										$("".typeArea"").hide();
								}
								else{
                                     $("".typeArea"").show();
                                     $("".startOver"").hide();
								}
                            } else {

                                localStorage.setItem(""OldChatConversationId"", """");
                                localStorage.setItem(""reopenOldConversation"","""" )
                                $("".startOver"").hide();
                                if (isEndChatCon == 1) {
                                    if (localStorage.getItem(""AgentName"") == null) {
                                       // $(""#custName"").text(""Bot"");
										$(""#custName"").text(AssignedAgent);
                                    } else {
                                       // $(""#");
                WriteLiteral(@"custName"").text(localStorage.getItem(""AgentName""));
										$(""#custName"").text(AssignedAgent);
                                    }

                                    $("".typeArea"").show();
                                } else {
                                    if (localStorage.getItem(""isEndReason"") == ""0"") {
                                        localStorage.setItem(""IsUsed"", 1);
                                       // $("".btnSubmit-sm"").removeAttr(""disabled"");
                                       // $("".btnSubmit-sm"").removeAttr(""style"");
                                        //$("".btnSubmit"").removeAttr(""disabled"");
                                       // $("".btnSubmit"").removeAttr(""style"");
										
										$("".speechLeft"").last().find(""button"").removeAttr(""disabled"").removeAttr(""style"");
                                        $(""#custName"").text(""Bot"");
                                    }
                                    $("".typeArea"").hide();
                             ");
                WriteLiteral(@"   }
								 if (conEndchat == 1)
								 {
								 // $("".startOver"").children().attr(""ActualConversationId"", localStorage.getItem(""conversationId""));
								    $("".startOver"").children().attr(""ActualConversationId"", currentConversationId);
                                    $("".startOver"").show();
                                      $("".typeArea"").hide();
                                  }
								  else{
								    $("".typeArea"").show();
								 }

                            }

                          //  $(""#conversation"").stop().animate({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);

                            $(""#backToAllChats"").show();
                                $(""#chatWindow"").removeClass(""hide"");
                                $(""#chatWindow"").addClass(""animated fadeInRight"");


                        }
                    }
                }
                  $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
				  $(""#custName"").text(AssignedAgent);
          ");
                WriteLiteral(@"  }
        });

        function loadChatWidget() {
            // SubscribeToSocket()
              $(""#custName"").text(""Bot"");
            $("".scroll"").mCustomScrollbar({
                    theme: ""minimal""
                });
            //    //$(""#submitForm"").addClass(""hide"");
                //$(""#chatWindow"").addClass(""animated fadeInRight show"");
                isAgent =");
#nullable restore
#line 2243 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                    Write(data.IsAgent);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
                if (isAgent == 1) {
                    if (isPingAgent == 1) {
                        $(""#bnrTitle"").text(""Ping Agent"");
                        SubscribeToSocket();
                       // UpdateAgentsForHubchat('ready', 2058);
                    }
                }

                var Data = JSON.stringify({
                    ""StatusId"": ""1""
                });
                var url1 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"";
                console.log('raja' + url1);
                $.ajax({
                    type: ""POST"",
                    url: url1,
                    dataType: ""JSON"",
                    contentType: ""application/json"",
                    async: false,
                    data: Data,
                    success: function (res) {
                        conversationId = res.Id;
						msgIds=[];
                        localStorage.setItem(""conversationId"", conversationId);
                        BotInteraction(conver");
                WriteLiteral(@"sationId, ""hi"")
                        // alert(conversationId);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                       // alert(textStatus);
					    console.log(textStatus);
                    }
                });
        }

        function GetReadableTimeDiff(tmpDate){
	        var timeDiffinMins = Math.abs(tmpDate - new Date())/(1000*60);
	        if(timeDiffinMins <= 1){
		        return  'Just now';
	        }
	        else if(timeDiffinMins <= 59){
		        return  parseInt(timeDiffinMins) + ' min';
	        }
	        else if(timeDiffinMins <= 1440){
		        return  parseInt(timeDiffinMins/60) + 'h ago';
	        }
	        else {
		        return  parseInt(timeDiffinMins/(60*24)) + 'd ago';
	        }
        }

        function getOldConversationHistory() {
            var oldActiveconversationId =  localStorage.getItem(""OldConversationIdActive"");
			conversationId = localStorage.getItem(""conversationId"");
			var name=""isAgentconne");
                WriteLiteral(@"cted_""+oldActiveconversationId;
			if(localStorage.getItem(name)== ""0"")
				oldActiveconversationId=conversationId;
            var customerId = localStorage.getItem(""customerId"");
            var customerName = localStorage.getItem(""customerName"");
                var g=");
#nullable restore
#line 2302 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                 Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n\t\t\t\tvar\tisEndChatCon=0;\n            var WidgetId =");
#nullable restore
#line 2304 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 2305 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
           // var url = ""http://hubchat.com"";
             var url =""https://hub-chat.telebu.com"";
            var imgUrl = url + ""/StaticFiles/images/Sender-sm.png"";
             
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/""+customerId+""/GetConversationsOfCustomer/"";

			 $.ajax({
                type: ""GET"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                success: function (res) {
                    if (res.length > 0) {
					var OldConversationChat11 = {};
                        OldConversationChat1 = JSON.stringify(res);
                        OldConversationChat1 = JSON.parse(OldConversationChat1);

                                if (OldConversationChat1.length > 0) {
                                    for (var r = OldConversationChat1.length - 1; r >= 0; r--) {
                                        if (OldConv");
                WriteLiteral(@"ersationChat1[r].ConversationId == oldActiveconversationId) {
                                            ActualConversationId = OldConversationChat1[r].ConversationId
                                            $(""#conversation"").html("""");
                                            for (var j = 0; j < OldConversationChat1[r].ConversationMessages.length; j++) {
                                var reopenOldConversation = JSON.stringify(OldConversationChat1[r].ConversationMessages)
                                var retValue2 = OldConversationChat1[r].ConversationMessages[j].Message;
                                var messageTypeId = OldConversationChat1[r].ConversationMessages[j].MessageTypeId;
                                //console.log(retValue2)
                                var resMsg2 = OldConversationChat1[r].ConversationMessages[j].Message;
                                var msgTime2 = new Date(OldConversationChat1[r].ConversationMessages[j].CreatedTimeUTC.replace('T', ' ') + 'Z');
             ");
                WriteLiteral(@"                                   msgTime2 = msgTime2.toLocaleString()

                                butt = """";
																						$(""#custName"").text(OldConversationChat1[r].AssignedAgent);
                                if (messageTypeId == 2 ) {
                                    resMsg2 = JSON.parse(resMsg2);
                                    for (var o = 0; o < resMsg2.length; o++) {
                                        try {
                                            if (resMsg2[o].buttons == undefined) { }
                                            else {
                                                if (resMsg2[o].buttons.length > 0) {
                                                    butt = """";
                                                    butt = '<div class=""mt-2"">';
                                                    for (var i = 0; i < resMsg2[o].buttons.length; i++) {
                                                        if (resMsg2[o].buttons[i].payload == ""submit"") {");
                WriteLiteral(@"
                                                            butt = butt + '<hr class=""mt-2 mb-3 chat-hr"">'
                                                            butt = butt + '<div class=""center""><button type=""button"" question=""' + resMsg2[o].text+'"" onclick=""submitAction(this)"" value=""Submit"" class=""btnSubmit small mr-2 mb-2 "" disabled=""disabled"" style=""cursor:not-allowed"">Submit</button></div>'
                                                        }
                                                        else
                                                            butt = butt + '<button type=""button"" onclick=""btnAction(this)"" value=""' + resMsg2[o].buttons[i].title + '"" class=""btnSubmit-sm mr-2 mb-2 "" disabled=""disabled"" style=""cursor:not-allowed"">' + resMsg2[o].buttons[i].title + '</button>';
                                                    }
                                                    butt = butt + '</div>';
                                                }
                         ");
                WriteLiteral(@"                   }
                                        }
                                        catch (e) { console.log(e); }

                                         var conversation = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                        conversation = conversation + '<p>' + resMsg2[o].text + '</p>' + butt + '</div> <div class=""time"">' + msgTime2 + '</div></div>';
                                        if(resMsg2[o].text !=undefined )
                                        $(""#conversation"").append(conversation);
										
																 if (resMsg2[o].hasOwnProperty(""attachment"")) {
										 if (resMsg2[o].attachment.type == ""video"") {
											var video_url = resMsg2[o].attachment.payload.src;
											var text1 = '<div class=""video-container""> <iframe src=""' + video_url + '"" frameborder=""0"" allowfullscreen></iframe> </div>'
											$(""#conversation"").append(text1);
             ");
                WriteLiteral(@"                                $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
											 }
											 }
											 

                                        if (resMsg2[o].custom == undefined){}
                                        else if (resMsg2[o].custom[0].text != """" && resMsg2[o].custom[0].text != null && resMsg2[o].custom[0].text != undefined) {
                                            endchat = ""TalkingToAgent"";
                                            localStorage.setItem(""isEndReason"", 1);
                                           // customerWebSocketSubscription();
                                            isEndChatCon = 1;
                                        var conversation  = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                        conversation = conversation + '<p>' + resMsg2[o].custom[0].text + '</p>' + butt + '</div><div class=""time"">' + msgTime2 + '</div></div>';
");
                WriteLiteral(@"                                        $(""#conversation"").append(conversation);
                                        }
															 	else if(resMsg2[o].custom[0].payload == ""image"")
										{
											var grptlk=resMsg2[o].custom[0].text;
											var text1 = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
											//text1 = text1 + '<a href=grptlk><img width=""20%"" height=""20%"" src=""' + grptlk+ '"" alt="""" ><a></div></div>';
											text1 = text1 + '<a href=""'+grptlk+'"" target=""_blank"">'+grptlk+'<a></div></div>';
											$(""#conversation"").append(text1);
                                            $("".formBase"").mCustomScrollbar(""scrollTo"",""bottom"");
										}
                                    }

                                } else if (messageTypeId == 1 && resMsg2 != ""success"" && resMsg2 != ""hi"") {
                                    if (resMsg2 == ""/affirm{\""group\"":\""Yes\""}"") {
                                ");
                WriteLiteral(@"        resMsg2 = ""Yes"";
                                    }
                                    else if (resMsg2 == ""/deny{\""group\"":\""No\""}"") {
                                        resMsg2 = ""No"";
                                    }
                                    if (resMsg2 == ""Yes"" || resMsg2 == ""No"")
                                        $("".formBase"").find('button[value=""' + resMsg2 + '""]').last().addClass(""select"");
                                    else {
                                        var resmsg2Arr = resMsg2.split(',');
                                        if (resmsg2Arr.length > 1) {
                                            for (var z = 0; z < resmsg2Arr.length; z++) {
                                                $("".formBase"").find('button[value=""' + resmsg2Arr[z] + '""]').addClass(""select"");
                                            }
                                        }
                                        else
                                          ");
                WriteLiteral(@"  $("".formBase"").find('button[value=""' + resMsg2 + '""]').addClass(""select"");
                                    }
                                    var text = '<div class=""speechItem right""><div class=""speechRight"">';
                                    text = text + '<p>' + msg + '</p></div>';
                                    text = text + '<div class=""time"">' + sentTime + '</div></div>';

                                    var conversation = '<div class=""speechItem right""><div class=""speechRight"">';
                                    conversation = conversation + '<p>' + resMsg2 + '</p></div>';
                                    conversation = conversation + '<div class=""time"">' + msgTime2 + '</div></div>';
                                    $(""#conversation"").append(conversation);
                                }
                                else if (messageTypeId == 3 && resMsg2 != ""EndChat from Customer"") {
                                    var conversation = '<div class=""speechItem right");
                WriteLiteral(@"""><div class=""speechRight"">';
                                    conversation = conversation + '<p>' + resMsg2 + '</p></div>';
                                    conversation = conversation + '<div class=""time"">' + msgTime2 + '</div></div>';
                                    $(""#conversation"").append(conversation);
                                } else if (messageTypeId == 4&& resMsg2 != ""EndChat from Customer"") {
                                    var conversation = '<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" alt="""" class=""left""><div class=""speechLeft"">';
                                    conversation = conversation + '<p>' + resMsg2 + '</p>' + butt + '</div><div class=""time"">' + msgTime2 + '</div></div>';
                                    $(""#conversation"").append(conversation);

                                }
                                //if (resMsg2 != ""undefined"" && resMsg2 != undefined) {
                                //    $(""#conversation"").stop().animat");
                WriteLiteral(@"e({ scrollTop: $(""#conversation"")[0].scrollHeight }, 1000);
                                //}

                                // document.getElementById(""imgUrl"").src=imgUrl; <div class=""time"">02:30 PM</div>
                            }
                                            $(""#AllChats"").hide();
                                            $(""#ExistingUser"").hide();
                                            var CId = localStorage.getItem(""conversationId"");
                                            if (isEndChatCon == 0) {
                                                endchat = """";
                                                localStorage.setItem(""isEndReason"", 0);
                                            }


                                            $("".startOver"").hide();
                                            $("".typeArea"").show();
                                        }

                                      //  $(""#conversation"").stop().animate({ scrollTop: $(""#conversation""");
                WriteLiteral(@")[0].scrollHeight }, 1000);
                                        $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
                                        $(""#chatWindow"").removeClass(""hide"");
                                        $(""#chatWindow"").addClass(""animated fadeInRight"");
                                    }
                        }
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    //alert(textStatus);
					 console.log(textStatus);
                }
            });

        }
        //function GetCurrentWidgetConfiguration(WidgetId) {
        //   // http://www.localhost:65000/accounts/5/widgets/l42Gcm6lckDfr1CafqRZsgv0QK0EmHO9
        //     var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId

        //    	 $.ajax({
        //        type: ""GET"",
        //        url: url2,
        //        dataType: ""JSON"",
        //        contentType: ""application/json"",
        //        async: false,
");
                WriteLiteral(@"        //        data: """",
        //        success: function (res) {
        //            if (res.length > 0) {

        //            }
        //        },
        //        error: function (jqXHR, textStatus, errorThrown) {
        //            console.log(textStatus);
        //        }
        //    });
        //}


        function GenerateDynamicWelcomeFrom() {
            var SettingsData;
            var welcomeFormData = localStorage.getItem(""widgetConfiguration"");
            // console.log(welcomeFormData);
            if (welcomeFormData != null) {

                welcomeFormData = JSON.parse(welcomeFormData);

                if (welcomeFormData.MetaData != """" && welcomeFormData.MetaData != undefined && welcomeFormData.MetaData != ""[]"") {
                    SettingsData = JSON.parse(welcomeFormData.MetaData);
                } else if (welcomeFormData.CustomMetaData != """" && welcomeFormData.CustomMetaData != undefined && welcomeFormData.CustomMetaData != ""[]"") {
                    Sett");
                WriteLiteral(@"ingsData = JSON.parse(welcomeFormData.CustomMetaData);
                }
            }
            //console.log(JSON.stringify(SettingsData));

    //var SettingsData = [{ ""FieldName"": ""Pan Number"", ""FieldType"": ""TextBox"", ""Prority"": ""1"", ""PlaceHolder"": ""Alphabets"", ""MaxChars"": ""40"", ""AllowSpecialChars"": ""No"", ""Mandatory"": ""No"" }, { ""FieldName"": ""Gender"", ""FieldType"": ""DropDown"", ""Prority"": ""2"", ""Options"": ""Female,Male"", ""Mandatory"": ""No"" }, { ""FieldName"": ""Account Number"", ""FieldType"": ""TextBox"", ""Prority"": ""3"", ""PlaceHolder"": ""Numeric"", ""MaxChars"": ""16"", ""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" }, { ""FieldName"": ""Email"", ""FieldType"": ""TextBox"", ""Prority"": ""2"", ""PlaceHolder"": ""Unicode"", ""MaxChars"": ""50"", ""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" }]

            //SettingsData = [{ ""FieldName"": ""Name"", ""FieldType"": ""TextBox"", ""Prority"": ""primary"", ""PlaceHolder"": ""Alphabets"", ""MaxChars"": ""100"", ""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" },
            //            { ""FieldName"": ""Mobile"", ""Fie");
                WriteLiteral(@"ldType"": ""TextBox"", ""Prority"": ""primary"", ""PlaceHolder"": ""Numeric"", ""MaxChars"": ""100"", ""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" },
            //            {""FieldName"":""Email"",""FieldType"":""TextBox"",""Prority"":""2"",""PlaceHolder"":""Unicode"",""MaxChars"":""50"",""AllowSpecialChars"":""Yes"",""Mandatory"":""Yes""}]
    var global_CallerDetails = [], global_ExcelFields = [];


    var editCallerDetailsData = """";
    if (SettingsData != """") {
        var settingsArray = SettingsData;
        $.each(settingsArray, function (key, value) {

            var callerAttributesObj = settingsArray[key];

             editCallerDetailsData += ""<div class='form-group'><label class='form-label'>"" + value.FieldName;
            //editCallerDetailsData += ""<div class='col-sm-6'><div class='form-group'><label class='txt-grey'>"" + value.FieldName;
            if (callerAttributesObj.Mandatory == ""Yes"") {
                editCallerDetailsData += ""<span class='text-danger'>*</span>"";
            }
            editCallerDetailsData += ""</la");
                WriteLiteral(@"bel>""
            if (callerAttributesObj.FieldType == ""TextBox"") {
                if (callerAttributesObj.FieldName.toLowerCase().includes(""date""))
                    editCallerDetailsData += ""<input type='Date' Key='"" + callerAttributesObj.FieldName + ""'id = 'txt"" + callerAttributesObj.FieldName + ""'class='text-box"";
                if (callerAttributesObj.FieldName.toLowerCase().includes(""date""))
                    editCallerDetailsData += ""<input type='email' Key='"" + callerAttributesObj.FieldName + ""'id = 'txt"" + callerAttributesObj.FieldName + ""' maxlength='"" + callerAttributesObj.MaxChars + ""' class='text-box  field "" + callerAttributesObj.PlaceHolder;
                else
                    editCallerDetailsData += ""<input FieldType='"" + callerAttributesObj.FieldType + ""' Key='"" + callerAttributesObj.FieldName + ""' maxlength='"" + callerAttributesObj.MaxChars + ""' class='text-box field "" + callerAttributesObj.PlaceHolder;
                if (callerAttributesObj.Mandatory == ""Yes"") {
               ");
                WriteLiteral(@"     editCallerDetailsData += "" txtRequired ""
                }
                if (callerAttributesObj.AllowSpecialChars == ""No"") {
                    editCallerDetailsData += "" NoSpecialChars""
                }
                editCallerDetailsData += ""' />""
            }
            //if (callerAttributesObj.FieldType == ""DropDown"") {
            //    editCallerDetailsData += ""<select FieldType='"" + callerAttributesObj.FieldType + ""' Key='"" + callerAttributesObj.FieldName + ""' id='ddl"" + callerAttributesObj.FieldName + ""' class='field form-control"";

            //    if (callerAttributesObj.Mandatory == ""Yes"") {
            //        editCallerDetailsData += "" ddlRequiredField""
            //    }
            //    editCallerDetailsData += ""'>"";
            //    editCallerDetailsData += ""<option value='Select'> Select </option>""
            //    var ddlOptions = callerAttributesObj.Options.split("","");
            //    $.each(ddlOptions, function (k, v) {
            //        editCallerDetailsData +=");
                WriteLiteral(@" ""<option value='"" + v + ""'>"" + v + ""</option>"";
            //    });
            //    editCallerDetailsData += ""</select>""
            //}
            if (callerAttributesObj.FieldType == ""DropDown"") {
                editCallerDetailsData += ""<select FieldType='"" + callerAttributesObj.FieldType + ""' Key='"" + callerAttributesObj.FieldName + ""' id='ddl"" + callerAttributesObj.FieldName + ""' class='field form-control"";

                if (callerAttributesObj.Mandatory == ""Yes"") {
                    editCallerDetailsData += "" ddlRequiredField""
                }
				 if (callerAttributesObj.MultiSelect == ""Yes"") {
                                editCallerDetailsData += "" CrmMultiselect""
                                editCallerDetailsData += ""' multiple='multiple'>"";
                            }
                            else {
                                editCallerDetailsData += ""'>"";
                            }

                if (callerAttributesObj.MultiSelect != ""Yes"") {
                    e");
                WriteLiteral(@"ditCallerDetailsData += ""<option value='Select'> Select </option>"";
                } else {
                    editCallerDetailsData += ""<option value='Select'> Select </option>"";
                }

               // editCallerDetailsData += ""'>"";

                var ddlOptions = callerAttributesObj.Options.split("","");
                $.each(ddlOptions, function (k, v) {
                    editCallerDetailsData += ""<option value='"" + v + ""'>"" + v + ""</option>"";
                });
                editCallerDetailsData += ""</select>""
            }
            if (callerAttributesObj.FieldType == ""TextArea"") {
                editCallerDetailsData += ""<textarea row='4' cols='20' FieldType='"" + callerAttributesObj.FieldType + ""' key='"" + callerAttributesObj.FieldName + ""' maxlength='"" + callerAttributesObj.MaxChars + ""'  class='"" + callerAttributesObj.PlaceHolder;
                if (callerAttributesObj.Mandatory == ""Yes"") {
                    editCallerDetailsData += "" txtRequired ""
                }
     ");
                WriteLiteral(@"           editCallerDetailsData += "" form-control field' ></textarea>""
            }


            editCallerDetailsData += ""</div>""
        });
    }
   // editCallerDetailsData += ""</div>"";
   // editCallerDetailsData += ""</hr><table class='table no-border'> <tr><td class='txt-grey'>Alternate Number</td><td><input type='text' id='txtalternatenumber' placeholder='Alternate Number'  maxlength='35' class='form-control onlynumbers'/></td> <td><i class='icon-plus text-blue AddAlternatenumber pointer ' title='Add Alternate number'></i></td> </tr><tr id='Number_0'> </tr></table>""

             if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""At the start of the conversation"") {
                 $(""#tblAddCallerDetails"").html(editCallerDetailsData);
                 $("".CrmMultiselect"").multiselect({
                     includeSelectAllOption: true,
                     buttonWidth: '100%'

                 });
             } else if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""Before connecting ");
                WriteLiteral(@"to an agent"") {
                 editCallerDetailsData = ""<div class='chat_form'><div><label class='text-danger text-center col-sm-12' id='lblEditErrorMsg'></label></div>"" + editCallerDetailsData;
                 editCallerDetailsData += ""<div class='center mt-3'><button class='btnSubmit' id='Submit'>Submit</button></div></div>"";
                 //localStorage.setItem(""editCallerDetailsData"",editCallerDetailsData);
                 $(""#conversation"").append(editCallerDetailsData);
                 $('.CrmMultiselect').multiselect({
                     includeSelectAllOption: true,
                     buttonWidth: '100%'

                 });
             } else if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""After agent is connected"") {
                 editCallerDetailsData = ""<div class='chat_form'><div><label class='text-danger text-center col-sm-12' id='lblEditErrorMsg'></label></div>"" + editCallerDetailsData;
                 editCallerDetailsData += ""<div class='center mt-3'><button class='");
                WriteLiteral(@"btnSubmit' id='Submit'>Submit</button></div></div>"";
                   // localStorage.setItem(""editCallerDetailsData"",editCallerDetailsData);
                 $(""#conversation"").append(editCallerDetailsData);
                 $('.CrmMultiselect').multiselect({
                     includeSelectAllOption: true,
                     buttonWidth: '100%'

                 });
}


}


        $(document).delegate(""#backToAllChats"", ""click"", function () {
            $(""#backToAllChats"").hide();
            $(""#chatWindow"").addClass(""hide"");
             GetConversationMessages(""0"");
            $(""#AllChats"").show();
        });

        function funGetWidget(widgetUUID) {
            //  http://hubchat.com
            $.ajax({
                url: ""https://hub-chat.telebu.com/accounts/"" + AccountId + ""/widgets/"" + widgetUUID,
                type: ""GET"",
                async: false,
                dataType: ""JSON"",
                data: {},
                success: function (res) {
                    // cons");
                WriteLiteral(@"ole.log(res);

                    if (res.Success == true) {
                        //  console.log(JSON.stringify(res.widgets));

                        var chatIcon_Color = res.widgets.WidgetThemes.Color;
                        var widgetThemeColor = chatIcon_Color + ""Theme"";

                        $("".widgetTheme"").attr(""Id"", widgetThemeColor);
                        // $("".iconTheme"").attr(""Id"", chatIconColor);
                        localStorage.setItem(""MaxWaitTimeToAgent"", res.widgets.AgentAndCustomerWaitTimeRestrictionInSec);
                        localStorage.setItem(""WhileConnectingToAnAgent"", res.widgets.WhileConnectingToAnAgent);
                        localStorage.setItem(""CustomerWaitTimeforAgentConnect"", res.widgets.CustomerWaitTimeForAgentConnect);
                        localStorage.setItem(""AutoCloseTimeForChatInMin"", res.widgets.AutoCloseTimeForChatInMin);
                        localStorage.setItem(""BotChatClosure"", res.widgets.BotChatClosure);
                        localSto");
                WriteLiteral(@"rage.setItem(""CustomerChatClosure"", res.widgets.AgentChatClosure);
                        localStorage.setItem(""widgetConfiguration"", JSON.stringify(res.widgets));

                        localStorage.setItem(""NonBusinessHoursMessage"", res.widgets.NonBusinessConnect);
                        localStorage.setItem(""TimeToDisplayWelcomeFrom"", res.widgets.TimeToDisplayWelcomeFormToCustomer);
                        GetTimeSlots(res.widgets.TimeSlotId);

                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (jqXHR.status == 401) {
                        window.location.href = ""/Login.aspx?message=Session expired"";
                    } else {
                        console.log(errorThrown);
                    }
                }
            });
        }

        function GetTimeSlots(TimeSlotId) {
            localStorage.setItem(""NonBusinessHours"", 1);
            var NonBusinessHoursMessage = """";
              $.ajax({
        typ");
                WriteLiteral(@"e: ""GET"",
                  async: false,
        url: ""https://web.press3.io/TestAgentData.aspx"",
        dataType: ""JSON"",
                  data: {
                      type: 3, AccountId: AccountId,
                      TimeSlotId: TimeSlotId

        },
                  success: function (res) {

                      for (var p = 0; p <= res.length - 1; p++) {

                          var currentDay = getDayAndTime(1);
                          var ActualDay = res[p].Day;
                          if (ActualDay == currentDay) {
                              localStorage.setItem(""NonBusinessHours"", 0);
                              localStorage.setItem(""CurrentDay"", res[p].Day );
                              localStorage.setItem(""FromTime"", res[p].FromTime);
                              localStorage.setItem(""ToTime"", res[p].ToTime);
                               NonBusinessHoursMessage = localStorage.getItem(""NonBusinessHoursMessage"");
                                if (localStorage.getItem(""Non");
                WriteLiteral(@"BusinessHours"") == ""0"") {
                                    NonBusinessHoursMessage = NonBusinessHoursMessage.replace(""X Hrs"", localStorage.getItem(""FromTime"") + "" Hrs"");
                                    NonBusinessHoursMessage = NonBusinessHoursMessage.replace(""Y Hrs"", localStorage.getItem(""ToTime"") + "" Hrs"");
                                    localStorage.setItem(""NonBusinessHoursMessage"",NonBusinessHoursMessage);
                                }
                            //  NonBusinessHoursMessage = res[p].NonBusinessConnect;
                              //NonBusinessHoursMessage = NonBusinessHoursMessage.replace(""X Hrs"", res[p].FromTime +"" Hrs"");
                              //NonBusinessHoursMessage = NonBusinessHoursMessage.replace(""Y Hrs"", res[p].ToTime +"" Hrs"");
                            //  localStorage.setItem(""NonBusinessHoursMessage"",NonBusinessHoursMessage);
                          }
                          //else {
                          //    NonBusinessHoursMessage = res[");
                WriteLiteral(@"p].NonBusinessConnect;
                          //    //NonBusinessHoursMessage = NonBusinessHoursMessage.replace(""X Hrs"", res[p].FromTime +"" Hrs"");
                          //    //NonBusinessHoursMessage = NonBusinessHoursMessage.replace(""Y Hrs"", res[p].ToTime +"" Hrs"");
                          //    localStorage.setItem(""NonBusinessHoursMessage"",NonBusinessHoursMessage);
                          //    localStorage.setItem(""NonBusinessHours"", 1);

                          //}
                      }

        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus);
        }
    });
        }


        function getDayAndTime(dayOrTime) {
            var objToday = new Date(),
                weekday = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),
                dayOfWeek = weekday[objToday.getDay()],
                curHour = objToday.getHours()>9?objToday.getHours():""0""+objToday.getHours(),
                curMinute =");
                WriteLiteral(@" objToday.getMinutes()>9?objToday.getMinutes():""0""+objToday.getMinutes(),
                curSeconds = objToday.getSeconds()>9?objToday.getSeconds():""0""+objToday.getSeconds()

            if (dayOrTime == 1) {
                return dayOfWeek;
            } else {
                return curHour + "":"" + curMinute + "":"" + curSeconds
            }


        }
  function getToken() {
             var username=""5ea2ff6537d6611ad919b4b3"",pwd=""buhubelet"";
            var url1 = ""https://chat-ping.telebu.com/api/getToken"";

                $.ajax({
                    type: ""GET"",
                    url: url1,
                    dataType: ""JSON"",
                    contentType: ""application/json"",
                    async: false,
                  headers: {
                 ""Authorization"": ""Basic""+"" ""+ btoa(username + ':' +pwd)
                   },
                    success: function (res) {
                        console.log(res);
                        pingToken = res.token;
                        local");
                WriteLiteral(@"Storage.setItem(""pingToken"", pingToken);

                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                      //  alert(textStatus);
					   console.log(textStatus);

                    }
                });
             return pingToken;
        }
        function GetPingUserId(mobile) {
            var pingUrl = ""https://chat-ping.telebu.com/api/getUserId"";
            var pingData = JSON.stringify({

	            ""mobileNumber"":mobile,
                ""countryCode"": ""+91"",
                ""token"": localStorage.getItem(""pingToken"")
            });
             $.ajax({
                    type: ""POST"",
                    url: pingUrl,
                    dataType: ""JSON"",
                    contentType: ""application/json"",
                    async: false,
                    data: pingData,
                    success: function (res) {
                        console.log(res.pingId);
                        localStorage.setItem(""pingAgentId"", res.pingId);
");
                WriteLiteral(@"                        // alert(conversationId);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                       // alert(textStatus);
					    console.log(textStatus);
                    }
             });
        }
        function PingConversation() {
             var pingUrl = ""https://chat-ping.telebu.com/conversation/new""
             var pingData = JSON.stringify({
                 ""conversationId"": localStorage.getItem(""conversationId""),//conversationId,
                ""pingId"":   localStorage.getItem(""pingAgentId""),//""5d820a80c3ad6403558f612d"",
                ""token"": localStorage.getItem(""pingToken""),
                ""name"": localStorage.getItem(""customerName"")

             });
             $.ajax({
                    type: ""POST"",
                    url: pingUrl,
                    dataType: ""JSON"",
                    contentType: ""application/json"",
                    async: false,
                    data: pingData,
                  ");
                WriteLiteral(@"  success: function (res) {
                        console.log(res);
                        userId = res._id;
                        localStorage.setItem(""userId"", userId);
                        UpdatePingUserId(userId);
                        // alert(conversationId);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                       // alert(textStatus);
					    console.log(textStatus);
                    }
             });
        }

        /* Attachmnents code */
         // var attachIcon = $(""#fileAttach"");
       // attachIcon.click(function () {
           $(document).delegate(""#fileAttach"", ""click"", function () {
           $(""#fileUpload"").click();
           });
        if (window.File && window.FileReader && window.FileList && window.Blob) {
         document.getElementById('fileUpload').addEventListener('change', handleFileSelect, false);
        } else {
          alert('The File APIs are not fully supported in this browser.');
        }");
                WriteLiteral(@"

        function handleFileSelect(evt) {
              var f = evt.target.files[0]; // FileList object
              var regExp = /(?:\.([^.]+))?$/;
              extnsn = regExp.exec(f.name)[1];
              var reader = new FileReader();
              // Closure to capture the file information.
              reader.onload = (function(theFile) {
                return function(e) {
                  var binaryData = e.target.result;
                  //Converting Binary Data to base 64
                   base64String = window.btoa(binaryData);
                  //showing file converted to base64
                    console.log(base64String)
                    $(""#send"").click();
                };
              })(f);
              reader.readAsBinaryString(f);
        }


        function GenerateDynamicFrom() {
            var SettingsData;
            var welcomeFormData = localStorage.getItem(""widgetConfiguration"");
            // console.log(welcomeFormData);
            if (welcomeFormData != null)");
                WriteLiteral(@" {

                welcomeFormData = JSON.parse(welcomeFormData);

                if (welcomeFormData.MetaData != """" && welcomeFormData.MetaData != undefined && welcomeFormData.MetaData != ""[]"") {
                    SettingsData = JSON.parse(welcomeFormData.MetaData);
                } else if (welcomeFormData.CustomMetaData != """" && welcomeFormData.CustomMetaData != undefined && welcomeFormData.CustomMetaData != ""[]"") {
                    SettingsData = JSON.parse(welcomeFormData.CustomMetaData);
                }
            }
            //console.log(JSON.stringify(SettingsData));

            //var SettingsData = [{ ""FieldName"": ""Pan Number"", ""FieldType"": ""TextBox"", ""Prority"": ""1"", ""PlaceHolder"": ""Alphabets"", ""MaxChars"": ""40"", ""AllowSpecialChars"": ""No"", ""Mandatory"": ""No"" }, { ""FieldName"": ""Gender"", ""FieldType"": ""DropDown"", ""Prority"": ""2"", ""Options"": ""Female,Male"", ""Mandatory"": ""No"" }, { ""FieldName"": ""Account Number"", ""FieldType"": ""TextBox"", ""Prority"": ""3"", ""PlaceHolder"": ""Numeric"", ""MaxChars"": ""16"", ");
                WriteLiteral(@"""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" }, { ""FieldName"": ""Email"", ""FieldType"": ""TextBox"", ""Prority"": ""2"", ""PlaceHolder"": ""Unicode"", ""MaxChars"": ""50"", ""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" }]

            //SettingsData = [{ ""FieldName"": ""Name"", ""FieldType"": ""TextBox"", ""Prority"": ""primary"", ""PlaceHolder"": ""Alphabets"", ""MaxChars"": ""100"", ""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" },
            //            { ""FieldName"": ""Mobile"", ""FieldType"": ""TextBox"", ""Prority"": ""primary"", ""PlaceHolder"": ""Numeric"", ""MaxChars"": ""100"", ""AllowSpecialChars"": ""Yes"", ""Mandatory"": ""Yes"" },
            //            {""FieldName"":""Email"",""FieldType"":""TextBox"",""Prority"":""2"",""PlaceHolder"":""Unicode"",""MaxChars"":""50"",""AllowSpecialChars"":""Yes"",""Mandatory"":""Yes""}]
            var global_CallerDetails = [], global_ExcelFields = [];


            var editCallerDetailsData = """";
            if (SettingsData != """") {
                var settingsArray = SettingsData;
                $.each(settingsArray, function (key, val");
                WriteLiteral(@"ue) {

                    var callerAttributesObj = settingsArray[key];

                    editCallerDetailsData += ""<div class='form-group'>"";
                    //< label class='form-label' > "" + value.FieldName;
                    //editCallerDetailsData += ""<div class='col-sm-6'><div class='form-group'><label class='txt-grey'>"" + value.FieldName;
                    //  if (callerAttributesObj.Mandatory == ""Yes"") {
                    //     editCallerDetailsData += ""<span class='text-danger'>*</span>"";
                    //  }
                    // editCallerDetailsData += ""</label>""
                    if (callerAttributesObj.FieldType == ""TextBox"") {
                        if (callerAttributesObj.FieldName.toLowerCase().includes(""date""))
                            editCallerDetailsData += ""<input type='Date' placeholder='"" + callerAttributesObj.FieldName + ""' Key='"" + callerAttributesObj.FieldName + ""'id = 'txt"" + callerAttributesObj.FieldName + ""'class='text-box"";
                        if (");
                WriteLiteral(@"callerAttributesObj.FieldName.toLowerCase().includes(""date""))
                            editCallerDetailsData += ""<input type='email' placeholder='"" + callerAttributesObj.FieldName + ""' Key='"" + callerAttributesObj.FieldName + ""'id = 'txt"" + callerAttributesObj.FieldName + ""' maxlength='"" + callerAttributesObj.MaxChars + ""' class='text-box  field "" + callerAttributesObj.PlaceHolder;
                        else
                            editCallerDetailsData += ""<input placeholder='"" + callerAttributesObj.FieldName + ""' FieldType='"" + callerAttributesObj.FieldType + ""' Key='"" + callerAttributesObj.FieldName + ""' maxlength='"" + callerAttributesObj.MaxChars + ""' class='text-box field "" + callerAttributesObj.PlaceHolder;
                        if (callerAttributesObj.Mandatory == ""Yes"") {
                            editCallerDetailsData += "" txtRequired ""
                        }
                        if (callerAttributesObj.AllowSpecialChars == ""No"") {
                            editCallerDetailsData ");
                WriteLiteral(@"+= "" NoSpecialChars""
                        }
                        editCallerDetailsData += ""' />""
                    }
                    //if (callerAttributesObj.FieldType == ""DropDown"") {
                    //    editCallerDetailsData += ""<select FieldType='"" + callerAttributesObj.FieldType + ""' Key='"" + callerAttributesObj.FieldName + ""' id='ddl"" + callerAttributesObj.FieldName + ""' class='field form-control"";

                    //    if (callerAttributesObj.Mandatory == ""Yes"") {
                    //        editCallerDetailsData += "" ddlRequiredField""
                    //    }
                    //    editCallerDetailsData += ""'>"";
                    //    editCallerDetailsData += ""<option value='Select'> Select </option>""
                    //    var ddlOptions = callerAttributesObj.Options.split("","");
                    //    $.each(ddlOptions, function (k, v) {
                    //        editCallerDetailsData += ""<option value='"" + v + ""'>"" + v + ""</option>"";
                    //");
                WriteLiteral(@"    });
                    //    editCallerDetailsData += ""</select>""
                    //}

                    if (callerAttributesObj.FieldType == ""DropDown"") {
                        editCallerDetailsData += ""<select FieldType='"" + callerAttributesObj.FieldType + ""' Key='"" + callerAttributesObj.FieldName + ""' id='ddl"" + callerAttributesObj.FieldName + ""' class='field form-control"";

                        if (callerAttributesObj.Mandatory == ""Yes"") {
                            editCallerDetailsData += "" ddlRequiredField ""
                        }
                        if (callerAttributesObj.MultiSelect == ""Yes"") {
                            editCallerDetailsData += "" CrmMultiselect mb-3""
                            editCallerDetailsData += ""' multiple='multiple'>"";
                        }
                        else {
                            editCallerDetailsData += ""'>"";
                        }

                        if (callerAttributesObj.MultiSelect != ""Yes"") {
                  ");
                WriteLiteral(@"          editCallerDetailsData += ""<option value='Select'> Select </option>"";
                        } else {
                            editCallerDetailsData += ""<option value='Select'> Select </option>"";
                        }

                        // editCallerDetailsData += ""'>"";

                        var ddlOptions = callerAttributesObj.Options.split("","");
                        $.each(ddlOptions, function (k, v) {
                            editCallerDetailsData += ""<option value='"" + v + ""'>"" + v + ""</option>"";
                        });
                        editCallerDetailsData += ""</select>""
                    }

                    if (callerAttributesObj.FieldType == ""TextArea"") {
                        editCallerDetailsData += ""<textarea row='4' cols='20' FieldType='"" + callerAttributesObj.FieldType + ""' key='"" + callerAttributesObj.FieldName + ""' maxlength='"" + callerAttributesObj.MaxChars + ""'  class='"" + callerAttributesObj.PlaceHolder;
                        if (callerAtt");
                WriteLiteral(@"ributesObj.Mandatory == ""Yes"") {
                            editCallerDetailsData += "" txtRequired ""
                        }
                        editCallerDetailsData += "" form-control field' placeholder='"" + callerAttributesObj.FieldName + ""' ></textarea>""
                    }


                    editCallerDetailsData += ""</div>""
                });
            }
            // editCallerDetailsData += ""</div>"";
            // editCallerDetailsData += ""</hr><table class='table no-border'> <tr><td class='txt-grey'>Alternate Number</td><td><input type='text' id='txtalternatenumber' placeholder='Alternate Number'  maxlength='35' class='form-control onlynumbers'/></td> <td><i class='icon-plus text-blue AddAlternatenumber pointer ' title='Add Alternate number'></i></td> </tr><tr id='Number_0'> </tr></table>""

            if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""Before connecting to an agent"") {
                editCallerDetailsData = ""<div class='chat_form '>"" + editCallerDetailsData;
  ");
                WriteLiteral(@"              editCallerDetailsData += ""<div class='error_msg mt-3'><label class='lblEditErrorMsg'></label></div><div class='center mt-3 mb-3'><button class='btnSubmit' id='Submit'>Submit</button></div></div>"";
                //localStorage.setItem(""editCallerDetailsData"",editCallerDetailsData);
                $(""#conversation"").append(editCallerDetailsData);
                $('.CrmMultiselect').multiselect({
                    includeSelectAllOption: true,
                    buttonWidth: '100%'

                });
            } else if (localStorage.getItem(""TimeToDisplayWelcomeFrom"") == ""After agent is connected"") {
                editCallerDetailsData = ""<div class='chat_form '>"" + editCallerDetailsData;
                editCallerDetailsData += ""<div class='error_msg mt-3'><label class='lblEditErrorMsg'></label></div><div class='center mt-3 mb-3'><button class='btnSubmit' id='Submit'>Submit</button></div></div>"";
                // localStorage.setItem(""editCallerDetailsData"",editCallerDetailsData);
");
                WriteLiteral(@"                $(""#conversation"").append(editCallerDetailsData);
                $('.CrmMultiselect').multiselect({
                    includeSelectAllOption: true,
                    buttonWidth: '100%'

                });
            }


        }

          function customerChatCloserTimer(conversationId) {
	 		           console.log(chatcloser);
            var imgUrl = url + ""/StaticFiles/images/BotIcon.png"";
            var chatCloserTimer = localStorage.getItem(""AutoCloseTimeForChatInMin"");
            chatCloserTimer = chatCloserTimer * 60;
           // chatCloserTimer = chatCloserTimer + 30;
		    if( localStorage.getItem(""chattimer"")>0)
				chatcloser=localStorage.getItem(""chattimer"");
				
            timerArr[conversationId] = setInterval(function () {
                if (chatcloser >= 0) {
			        console.log(chatcloser+""- ConId:""+conversationId);
                    chatcloser++;
					 localStorage.setItem(""chattimer"",chatcloser);
                }
                if (chatcloser == chatC");
                WriteLiteral(@"loserTimer) {
				
			        UpdateTocloseChat(1,conversationId);
					 localStorage.removeItem('chattimer');
					nowtime = new Date();
				    receiveTime = nowtime.toLocaleTimeString().replace(/([\d]+:[\d]{2})(:[\d]{2})(.*)/, ""$1$3"");
				      var CustomerMsg2 = JSON.parse('{""recipient_id"":""agent_' + conversationId + '"",""text"":""' + localStorage.getItem(""CustomerChatClosure"") + '"",""timeStamp"":""' + receiveTime + '""}');
                            chatConversation = """";
                            convMsg = """";
                            chatConversation = localStorage.getItem(""ChatConversation"");
							    if (chatConversation != """" && chatConversation != ""undefined"" && chatConversation != null && chatConversation != ""[]"") {
							    chatConversation = chatConversation.slice(0, -1);
							    convMsg = JSON.stringify(CustomerMsg2);
							    chatConversation = chatConversation +"",""+ convMsg;
							    chatConversation = chatConversation + ']';
							    localStorage.setItem(""ChatConversation"",chatC");
                WriteLiteral(@"onversation);
							    } else {
							    localStorage.setItem(""ChatConversation"",JSON.stringify(CustomerMsg2));
							    }
                        $(""#conversation"").append('<div class=""speechItem""><div class=""clearfix""><img src=""' + imgUrl + '"" class=""left"" alt=""""><div class=""speechLeft""><p>' + localStorage.getItem(""CustomerChatClosure"") + '</p></div></div>');
                        $("".formBase"").mCustomScrollbar(""scrollTo"", ""bottom"");
						
					   // toSendConversation_Of_aAgent_Customer(localStorage.getItem(""CustomerChatClosure""), 4);
						var jsnMsg='[{""text"":""' + localStorage.getItem(""CustomerChatClosure"") + '""}]';
					    toSendConversation_Of_aAgent_Customer(jsnMsg, 2);
						
					     var name=""isAgentconnected_""+conversationId;
					       localStorage.setItem(name,0);
                       // $("".startOver"").children().attr(""ActualConversationId"", localStorage.getItem(""conversationId""));
					     $("".startOver"").children().attr(""ActualConversationId"", conversationId);
					    localSt");
                WriteLiteral(@"orage.setItem(""Startoverenabled"", ""true"");
				       $("".startOver"").show();
                        $("".typeArea"").hide();
                    clearInterval(timerArr[conversationId]);
                        chatcloser = -1;
                         var fromId = localStorage.getItem(""userId"");
                         var agentId = localStorage.getItem(""pingAgentId"");
                         var IsPingAgent = localStorage.getItem(""IsPingAgent"");
                        var cust_jsonObj;
                        if (IsPingAgent == ""true"") {
                            cust_jsonObj = { ""conversationId"": conversationId, ""from"": conversationId, ""to"": agentId, ""messageType"": ""0"", ""message"": ""EndChat from Customer"",""endchat"":""true"" };
                        } else {
                             cust_jsonObj = { ""conversationId"": conversationId, ""from"": fromId, ""to"": agentId, ""messageType"": ""0"", ""message"": ""EndChat from Customer"" ,""endchat"":""true"" };
                        }
                        customerSocke");
                WriteLiteral(@"t.emit('newMessage', cust_jsonObj, function (data) { console.log(data); });
					     toSendConversation_Of_aAgent_Customer(""EndChat from Customer"", 3);
                        if (customerSocket != undefined) {
                            customerSocket.disconnect();
						    //customerSocket=null;
                            isDisconnect = 1;
                            localStorage.setItem(""isDisconnect"", isDisconnect);
                        }
                        DisconnectAgentForThisChat();
                        return false;
                    }
                }, 2000);

        }

        function DisconnectAgentForThisChat() {
            $.ajax({
                type: ""GET"",
                url: ""https://web.press3.io/TestAgentData.aspx"",
                dataType: ""JSON"",
                data: {
                    type: 4, AccountId: AccountId, ConversationId: localStorage.getItem(""conversationId""), AgentId: localStorage.getItem(""AgentId"")
                },
                success: funct");
                WriteLiteral(@"ion (res) {
                    console.log(res)


                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus);
                }
            });
        }

        function UpdatePingUserId(userId) {
                var g=");
#nullable restore
#line 3103 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                 Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 3104 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 3105 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
            //var url = ""http://hubchat.com"";
             var url =""https://hub-chat.telebu.com"";
			  var agentName = localStorage.getItem(""AgentName"");
             conversationId = localStorage.getItem(""conversationId"");
           // var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/""+userId+""/UpdateUserId/"";
			 var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/""+userId+""/""+agentName+""/UpdateUserId/"";
         //  http://hubchat.com/accounts/1/widgets/1/Conversations/2/420/UpdateStatusOfMsg

            $.ajax({
                type: ""POST"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                success: function (res) {
                    console.log(""Inserted successfully."");


                     },
                error: function (jqXHR, textStatus, errorTh");
                WriteLiteral("rown) {\n                   // alert(textStatus);\n\t\t\t\t    console.log(textStatus);\n                }\n            });\n        }\n\t\t\n\t\tfunction UpdateTocloseChat(isClosed) {\n                var g=");
#nullable restore
#line 3134 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                 Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 3135 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 3136 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
             var url =""https://hub-chat.telebu.com"";
             conversationId = localStorage.getItem(""conversationId"");
             var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/"" + isClosed +""/ClosedCustomerChat/"";

            $.ajax({
                type: ""POST"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                success: function (res) {
                    console.log(""Inserted successfully."");


                     },
                error: function (jqXHR, textStatus, errorThrown) {
                   // alert(textStatus);
					 console.log(textStatus);
                }
            });
        }
		 function getConversationEndchat(conversationId) {
            var g =");
#nullable restore
#line 3160 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
              Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 3161 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 3162 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
            // var url = ""http://hubchat.com"";
           
			 var url = ""https://hub-chat.telebu.com"";
            var imgUrl = url + ""/StaticFiles/images/Sender-sm.png"";
			var conversationEndchat=0;
            var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/getConversationEndchat/"";
			 $.ajax({
                type: ""GET"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                 success: function (res) {
                     if (res.length > 0) {
					 console.log(res);
					conversationEndchat= res[0].getConversationEndchat;
                     }
                 },
                error: function (jqXHR, textStatus, errorThrown) {
                   // alert(textStatus);
					 console.log(textStatus);
                }
            });
			return conversationEndchat;
        }
		function UpdateBotFlowEnd(botFlowEnd, co");
                WriteLiteral("nversationId) {\n                 var g =");
#nullable restore
#line 3190 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                   Write(x);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var WidgetId =");
#nullable restore
#line 3191 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                     Write(data.WidgetId);

#line default
#line hidden
#nullable disable
                WriteLiteral(";\n            var AccountId =");
#nullable restore
#line 3192 "/home/ubuntu/HubChat/Telebu.Hub.Chat/TelebuHubChat/TelebuHubChat/Views/Chat/Chat.cshtml"
                      Write(data.AccountId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@";
             var url = ""https://hub-chat.telebu.com"";
           //  conversationId = localStorage.getItem(""conversationId"");
             var url2 = url + ""/accounts/"" + AccountId + ""/widgets/"" + WidgetId + ""/conversations/"" + conversationId + ""/"" + botFlowEnd +""/UpdateBotFlowEnd/"";

            $.ajax({
                type: ""POST"",
                url: url2,
                dataType: ""JSON"",
                contentType: ""application/json"",
                async: false,
                data: """",
                success: function (res) {
                    console.log(""Inserted successfully."");


                     },
                error: function (jqXHR, textStatus, errorThrown) {
                    //alert(textStatus);
					console.log(textStatus);
                }
            });

        }

    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
